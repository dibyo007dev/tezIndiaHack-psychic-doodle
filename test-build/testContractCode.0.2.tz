parameter (or (or (or (or (pair %approve (address %approve_to) (string %token_id)) (string %burnDataToken)) (pair %mintDataToken (address %address) (string %token_id))) (pair %transfer (address %to) (string %token_id))) (pair %transferFrom (pair (address %f) (address %t)) (string %token_id)));
storage   (pair (pair (pair (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)) (big_map %tokenHolderToID address (set string))) (big_map %tokenIdToOwner string address)) (set %tokensMinted string));
code
  {
    DUP;        # pair(params, storage).pair(params, storage)
    CDR;        # storage.pair(params, storage)
    SWAP;       # pair(params, storage).storage
    CAR;        # params.storage
    Internal error: Compiler error:
  Message      : UPDATE on option address.set string.big_map address (set string).pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address).big_map string address.set string.pair %mintDataToken (address %address) (string %token_id){params}.pair (pair (pair (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)) (big_map address (set string))) (big_map string address)) (set string)
  Input stack  : or (or (or (or (pair %approve (address %approve_to) (string %token_id)) (string @token_id)) (pair %mintDataToken (address %address) (string %token_id))) (pair %transfer (address %to) (string %token_id))) (pair %transferFrom (pair (address %f) (address %t)) (string %token_id)){params}.pair (pair (pair (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)) (big_map %tokenHolderToID address (set string))) (big_map %tokenIdToOwner string address)) (set %tokensMinted string){storage}
  Instruction  : (MIif_left (
   (MIseq
      [(MIerror
          "Compiler error:\n  Message      : UPDATE on option
 # or (or (or (or (pair %approve (address %approve_to) (string %token_id)) (string @token_id)) (pair %mintDataToken (address %address) (string %token_id))) (pair %transfer (address %to) (string %token_id))) (pair %transferFrom (pair (address %f) (address %t)) (string %token_id)){params}.pair (pair (pair (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)) (big_map %tokenHolderToID address (set string))) (big_map %tokenIdToOwner string address)) (set %tokensMinted string){storage}
    IF_LEFT
      {
        Internal error: Compiler error:
  Message      : UPDATE on option address.set string.big_map address (set string).pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address).big_map string address.set string.pair %mintDataToken (address %address) (string %token_id){params}.pair (pair (pair (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)) (big_map address (set string))) (big_map string address)) (set string)
  Input stack  : or (or (or (pair %approve (address %approve_to) (string %token_id)) (string @token_id)) (pair %mintDataToken (address %address) (string %token_id))) (pair %transfer (address %to) (string %token_id)){params}.pair (pair (pair (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)) (big_map %tokenHolderToID address (set string))) (big_map %tokenIdToOwner string address)) (set %tokensMinted string){storage}
  Instruction  : (MIif_left (
   (MIseq
      [(MIerror
          "Compiler error:\n  Message      : UPDATE on option
 # or (or (or (pair %approve (address %approve_to) (string %token_id)) (string @token_id)) (pair %mintDataToken (address %address) (string %token_id))) (pair %transfer (address %to) (string %token_id)){params}.pair (pair (pair (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)) (big_map %tokenHolderToID address (set string))) (big_map %tokenIdToOwner string address)) (set %tokensMinted string){storage}
        IF_LEFT
          {
            Internal error: Compiler error:
  Message      : UPDATE on option address.set string.big_map address (set string).pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address).big_map string address.set string.pair %mintDataToken (address %address) (string %token_id){params}.pair (pair (pair (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)) (big_map address (set string))) (big_map string address)) (set string)
  Input stack  : or (or (pair %approve (address %approve_to) (string %token_id)) (string @token_id)) (pair %mintDataToken (address %address) (string %token_id)){params}.pair (pair (pair (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)) (big_map %tokenHolderToID address (set string))) (big_map %tokenIdToOwner string address)) (set %tokensMinted string){storage}
  Instruction  : (MIif_left (
   (MIif_left (
      (MIseq
         [(MIcomment "Entry point: approve");
           (
 # or (or (pair %approve (address %approve_to) (string %token_id)) (string @token_id)) (pair %mintDataToken (address %address) (string %token_id)){params}.pair (pair (pair (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)) (big_map %tokenHolderToID address (set string))) (big_map %tokenIdToOwner string address)) (set %tokensMinted string){storage}
            IF_LEFT
              {
                IF_LEFT
                  {
                    # Entry point: approve # params.storage
                    # sp.verify(self.data.tokensMinted.contains(params.token_id)) # params.storage
                    SWAP;       # storage.params
                    DUP;        # storage.storage.params
                    DUG 2;      # storage.params.storage
                    CDR;        # set string.params.storage
                    SWAP;       # params.set string.storage
                    DUP;        # params.params.set string.storage
                    DUG 2;      # params.set string.params.storage
                    CDR;        # string.set string.params.storage
                    MEM;        # bool.params.storage
                    IF
                      {}
                      {
                        PUSH string "WrongCondition: self.data.tokensMinted.contains(params.token_id)"; # string.params.storage
                        FAILWITH;   # FAILED
                      }; # params.storage
                    # sp.verify(sp.sender == self.data.tokenIdToOwner[params.token_id]) # params.storage
                    SWAP;       # storage.params
                    DUP;        # storage.storage.params
                    DUG 2;      # storage.params.storage
                    CADR;       # big_map string address.params.storage
                    SWAP;       # params.big_map string address.storage
                    DUP;        # params.params.big_map string address.storage
                    DUG 2;      # params.big_map string address.params.storage
                    CDR;        # string.big_map string address.params.storage
                    GET;        # option address.params.storage
                    IF_SOME
                      {
                        # of_some: Get-item:65 # address.params.storage
                      }
                      {
                        PUSH string "Get-item:65"; # string.params.storage
                        FAILWITH;   # FAILED
                      }; # address.params.storage
                    SENDER;     # address.address.params.storage
                    COMPARE;    # int.params.storage
                    EQ;         # bool.params.storage
                    IF
                      {}
                      {
                        PUSH string "WrongCondition: sp.sender == self.data.tokenIdToOwner[params.token_id]"; # string.params.storage
                        FAILWITH;   # FAILED
                      }; # params.storage
                    # self.data.tokenApprovals[params.token_id] = params.approve_to # params.storage
                    SWAP;       # storage.params
                    DUP;        # storage.storage.params
                    DUG 2;      # storage.params.storage
                    DUP;        # storage.storage.params.storage
                    CDR;        # set string.storage.params.storage
                    SWAP;       # storage.set string.params.storage
                    CAR;        # pair (pair (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)) (big_map %tokenHolderToID address (set string))) (big_map %tokenIdToOwner string address).set string.params.storage
                    DUP;        # pair (pair (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)) (big_map %tokenHolderToID address (set string))) (big_map %tokenIdToOwner string address).pair (pair (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)) (big_map %tokenHolderToID address (set string))) (big_map %tokenIdToOwner string address).set string.params.storage
                    CDR;        # big_map string address.pair (pair (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)) (big_map %tokenHolderToID address (set string))) (big_map %tokenIdToOwner string address).set string.params.storage
                    SWAP;       # pair (pair (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)) (big_map %tokenHolderToID address (set string))) (big_map %tokenIdToOwner string address).big_map string address.set string.params.storage
                    CAR;        # pair (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)) (big_map %tokenHolderToID address (set string)).big_map string address.set string.params.storage
                    DUP;        # pair (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)) (big_map %tokenHolderToID address (set string)).pair (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)) (big_map %tokenHolderToID address (set string)).big_map string address.set string.params.storage
                    CDR;        # big_map address (set string).pair (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)) (big_map %tokenHolderToID address (set string)).big_map string address.set string.params.storage
                    SWAP;       # pair (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)) (big_map %tokenHolderToID address (set string)).big_map address (set string).big_map string address.set string.params.storage
                    CAR;        # pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address).big_map address (set string).big_map string address.set string.params.storage
                    DUP;        # pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address).pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address).big_map address (set string).big_map string address.set string.params.storage
                    CAR;        # pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol).pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address).big_map address (set string).big_map string address.set string.params.storage
                    SWAP;       # pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address).pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol).big_map address (set string).big_map string address.set string.params.storage
                    CDR;        # big_map string address.pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol).big_map address (set string).big_map string address.set string.params.storage
                    DIG 5;      # params.big_map string address.pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol).big_map address (set string).big_map string address.set string.storage
                    DUP;        # params.params.big_map string address.pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol).big_map address (set string).big_map string address.set string.storage
                    DUG 6;      # params.big_map string address.pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol).big_map address (set string).big_map string address.set string.params.storage
                    CAR;        # address.big_map string address.pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol).big_map address (set string).big_map string address.set string.params.storage
                    SOME;       # option address.big_map string address.pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol).big_map address (set string).big_map string address.set string.params.storage
                    DIG 6;      # params.option address.big_map string address.pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol).big_map address (set string).big_map string address.set string.storage
                    DUP;        # params.params.option address.big_map string address.pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol).big_map address (set string).big_map string address.set string.storage
                    DUG 7;      # params.option address.big_map string address.pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol).big_map address (set string).big_map string address.set string.params.storage
                    CDR;        # string.option address.big_map string address.pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol).big_map address (set string).big_map string address.set string.params.storage
                    UPDATE;     # big_map string address.pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol).big_map address (set string).big_map string address.set string.params.storage
                    SWAP;       # pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol).big_map string address.big_map address (set string).big_map string address.set string.params.storage
                    PAIR;       # pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map string address).big_map address (set string).big_map string address.set string.params.storage
                    PAIR;       # pair (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map string address)) (big_map address (set string)).big_map string address.set string.params.storage
                    PAIR;       # pair (pair (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map string address)) (big_map address (set string))) (big_map string address).set string.params.storage
                    PAIR;       # pair (pair (pair (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map string address)) (big_map address (set string))) (big_map string address)) (set string).params.storage
                    DUG 2;      # params.storage.pair (pair (pair (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map string address)) (big_map address (set string))) (big_map string address)) (set string)
                    DROP;       # storage.pair (pair (pair (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map string address)) (big_map address (set string))) (big_map string address)) (set string)
                    DROP;       # pair (pair (pair (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map string address)) (big_map address (set string))) (big_map string address)) (set string)
                  }
                  {
                    # Entry point: burnDataToken # params.storage
                    # sp.verify(sp.sender == self.data.admin) # params.storage
                    SWAP;       # storage.params
                    DUP;        # storage.storage.params
                    DUG 2;      # storage.params.storage
                    CAAAAAAAR;  # address.params.storage
                    SENDER;     # address.address.params.storage
                    COMPARE;    # int.params.storage
                    EQ;         # bool.params.storage
                    IF
                      {}
                      {
                        PUSH string "WrongCondition: sp.sender == self.data.admin"; # string.params.storage
                        FAILWITH;   # FAILED
                      }; # params.storage
                    # sp.verify(self.data.tokensMinted.contains(params.token_id)) # params.storage
                    SWAP;       # storage.params
                    DUP;        # storage.storage.params
                    DUG 2;      # storage.params.storage
                    CDR;        # set string.params.storage
                    SWAP;       # params.set string.storage
                    DUP;        # params.params.set string.storage
                    DUG 2;      # params.set string.params.storage
                    MEM;        # bool.params.storage
                    IF
                      {}
                      {
                        PUSH string "WrongCondition: self.data.tokensMinted.contains(params.token_id)"; # string.params.storage
                        FAILWITH;   # FAILED
                      }; # params.storage
                    # self.data.tokensMinted.remove(params.token_id) # params.storage
                    SWAP;       # storage.params
                    DUP;        # storage.storage.params
                    DUG 2;      # storage.params.storage
                    DUP;        # storage.storage.params.storage
                    CAR;        # pair (pair (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)) (big_map %tokenHolderToID address (set string))) (big_map %tokenIdToOwner string address).storage.params.storage
                    SWAP;       # storage.pair (pair (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)) (big_map %tokenHolderToID address (set string))) (big_map %tokenIdToOwner string address).params.storage
                    CDR;        # set string.pair (pair (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)) (big_map %tokenHolderToID address (set string))) (big_map %tokenIdToOwner string address).params.storage
                    PUSH bool False; # bool.set string.pair (pair (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)) (big_map %tokenHolderToID address (set string))) (big_map %tokenIdToOwner string address).params.storage
                    DIG 3;      # params.bool.set string.pair (pair (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)) (big_map %tokenHolderToID address (set string))) (big_map %tokenIdToOwner string address).storage
                    DUP;        # params.params.bool.set string.pair (pair (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)) (big_map %tokenHolderToID address (set string))) (big_map %tokenIdToOwner string address).storage
                    DUG 4;      # params.bool.set string.pair (pair (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)) (big_map %tokenHolderToID address (set string))) (big_map %tokenIdToOwner string address).params.storage
                    UPDATE;     # set string.pair (pair (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)) (big_map %tokenHolderToID address (set string))) (big_map %tokenIdToOwner string address).params.storage
                    SWAP;       # pair (pair (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)) (big_map %tokenHolderToID address (set string))) (big_map %tokenIdToOwner string address).set string.params.storage
                    PAIR;       # pair (pair (pair (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)) (big_map %tokenHolderToID address (set string))) (big_map %tokenIdToOwner string address)) (set string).params.storage
                    DUG 2;      # params.storage.pair (pair (pair (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)) (big_map %tokenHolderToID address (set string))) (big_map %tokenIdToOwner string address)) (set string)
                    DROP;       # storage.pair (pair (pair (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)) (big_map %tokenHolderToID address (set string))) (big_map %tokenIdToOwner string address)) (set string)
                    DROP;       # pair (pair (pair (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)) (big_map %tokenHolderToID address (set string))) (big_map %tokenIdToOwner string address)) (set string)
                  }; # pair (pair (pair (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map string address)) (big_map address (set string))) (big_map string address)) (set string)
              }
              {
                # Entry point: mintDataToken # params.storage
                # sp.verify(sp.sender == self.data.admin) # params.storage
                SWAP;       # storage.params
                DUP;        # storage.storage.params
                DUG 2;      # storage.params.storage
                CAAAAAAAR;  # address.params.storage
                SENDER;     # address.address.params.storage
                COMPARE;    # int.params.storage
                EQ;         # bool.params.storage
                IF
                  {}
                  {
                    PUSH string "WrongCondition: sp.sender == self.data.admin"; # string.params.storage
                    FAILWITH;   # FAILED
                  }; # params.storage
                # sp.verify(~ (self.data.tokensMinted.contains(params.token_id))) # params.storage
                SWAP;       # storage.params
                DUP;        # storage.storage.params
                DUG 2;      # storage.params.storage
                CDR;        # set string.params.storage
                SWAP;       # params.set string.storage
                DUP;        # params.params.set string.storage
                DUG 2;      # params.set string.params.storage
                CDR;        # string.set string.params.storage
                MEM;        # bool.params.storage
                IF
                  {
                    PUSH string "WrongCondition: ~ (self.data.tokensMinted.contains(params.token_id))"; # string.params.storage
                    FAILWITH;   # FAILED
                  }
                  {}; # params.storage
                # self.data.tokensMinted.add(params.token_id) # params.storage
                SWAP;       # storage.params
                DUP;        # storage.storage.params
                DUG 2;      # storage.params.storage
                DUP;        # storage.storage.params.storage
                CAR;        # pair (pair (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)) (big_map %tokenHolderToID address (set string))) (big_map %tokenIdToOwner string address).storage.params.storage
                SWAP;       # storage.pair (pair (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)) (big_map %tokenHolderToID address (set string))) (big_map %tokenIdToOwner string address).params.storage
                CDR;        # set string.pair (pair (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)) (big_map %tokenHolderToID address (set string))) (big_map %tokenIdToOwner string address).params.storage
                PUSH bool True; # bool.set string.pair (pair (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)) (big_map %tokenHolderToID address (set string))) (big_map %tokenIdToOwner string address).params.storage
                DIG 3;      # params.bool.set string.pair (pair (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)) (big_map %tokenHolderToID address (set string))) (big_map %tokenIdToOwner string address).storage
                DUP;        # params.params.bool.set string.pair (pair (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)) (big_map %tokenHolderToID address (set string))) (big_map %tokenIdToOwner string address).storage
                DUG 4;      # params.bool.set string.pair (pair (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)) (big_map %tokenHolderToID address (set string))) (big_map %tokenIdToOwner string address).params.storage
                CDR;        # string.bool.set string.pair (pair (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)) (big_map %tokenHolderToID address (set string))) (big_map %tokenIdToOwner string address).params.storage
                UPDATE;     # set string.pair (pair (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)) (big_map %tokenHolderToID address (set string))) (big_map %tokenIdToOwner string address).params.storage
                SWAP;       # pair (pair (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)) (big_map %tokenHolderToID address (set string))) (big_map %tokenIdToOwner string address).set string.params.storage
                PAIR;       # pair (pair (pair (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)) (big_map %tokenHolderToID address (set string))) (big_map %tokenIdToOwner string address)) (set string).params.storage
                DUG 2;      # params.storage.pair (pair (pair (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)) (big_map %tokenHolderToID address (set string))) (big_map %tokenIdToOwner string address)) (set string)
                SWAP;       # storage.params.pair (pair (pair (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)) (big_map %tokenHolderToID address (set string))) (big_map %tokenIdToOwner string address)) (set string)
                DROP;       # params.pair (pair (pair (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)) (big_map %tokenHolderToID address (set string))) (big_map %tokenIdToOwner string address)) (set string)
                # if ~ (self.data.ownerToBalance.contains(params.address)): # params.pair (pair (pair (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)) (big_map %tokenHolderToID address (set string))) (big_map %tokenIdToOwner string address)) (set string)
                SWAP;       # pair (pair (pair (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)) (big_map %tokenHolderToID address (set string))) (big_map %tokenIdToOwner string address)) (set string).params
                DUP;        # pair (pair (pair (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)) (big_map %tokenHolderToID address (set string))) (big_map %tokenIdToOwner string address)) (set string).pair (pair (pair (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)) (big_map %tokenHolderToID address (set string))) (big_map %tokenIdToOwner string address)) (set string).params
                DUG 2;      # pair (pair (pair (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)) (big_map %tokenHolderToID address (set string))) (big_map %tokenIdToOwner string address)) (set string).params.pair (pair (pair (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)) (big_map %tokenHolderToID address (set string))) (big_map %tokenIdToOwner string address)) (set string)
                CAAAAADR;   # big_map address int.params.pair (pair (pair (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)) (big_map %tokenHolderToID address (set string))) (big_map %tokenIdToOwner string address)) (set string)
                SWAP;       # params.big_map address int.pair (pair (pair (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)) (big_map %tokenHolderToID address (set string))) (big_map %tokenIdToOwner string address)) (set string)
                DUP;        # params.params.big_map address int.pair (pair (pair (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)) (big_map %tokenHolderToID address (set string))) (big_map %tokenIdToOwner string address)) (set string)
                DUG 2;      # params.big_map address int.params.pair (pair (pair (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)) (big_map %tokenHolderToID address (set string))) (big_map %tokenIdToOwner string address)) (set string)
                CAR;        # address.big_map address int.params.pair (pair (pair (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)) (big_map %tokenHolderToID address (set string))) (big_map %tokenIdToOwner string address)) (set string)
                MEM;        # bool.params.pair (pair (pair (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)) (big_map %tokenHolderToID address (set string))) (big_map %tokenIdToOwner string address)) (set string)
                IF
                  {}
                  {
                    # self.data.tokenHolderToID[params.address] = sp.set([]) # params.pair (pair (pair (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)) (big_map %tokenHolderToID address (set string))) (big_map %tokenIdToOwner string address)) (set string)
                    SWAP;       # pair (pair (pair (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)) (big_map %tokenHolderToID address (set string))) (big_map %tokenIdToOwner string address)) (set string).params
                    DUP;        # pair (pair (pair (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)) (big_map %tokenHolderToID address (set string))) (big_map %tokenIdToOwner string address)) (set string).pair (pair (pair (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)) (big_map %tokenHolderToID address (set string))) (big_map %tokenIdToOwner string address)) (set string).params
                    DUG 2;      # pair (pair (pair (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)) (big_map %tokenHolderToID address (set string))) (big_map %tokenIdToOwner string address)) (set string).params.pair (pair (pair (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)) (big_map %tokenHolderToID address (set string))) (big_map %tokenIdToOwner string address)) (set string)
                    DUP;        # pair (pair (pair (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)) (big_map %tokenHolderToID address (set string))) (big_map %tokenIdToOwner string address)) (set string).pair (pair (pair (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)) (big_map %tokenHolderToID address (set string))) (big_map %tokenIdToOwner string address)) (set string).params.pair (pair (pair (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)) (big_map %tokenHolderToID address (set string))) (big_map %tokenIdToOwner string address)) (set string)
                    CDR;        # set string.pair (pair (pair (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)) (big_map %tokenHolderToID address (set string))) (big_map %tokenIdToOwner string address)) (set string).params.pair (pair (pair (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)) (big_map %tokenHolderToID address (set string))) (big_map %tokenIdToOwner string address)) (set string)
                    SWAP;       # pair (pair (pair (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)) (big_map %tokenHolderToID address (set string))) (big_map %tokenIdToOwner string address)) (set string).set string.params.pair (pair (pair (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)) (big_map %tokenHolderToID address (set string))) (big_map %tokenIdToOwner string address)) (set string)
                    CAR;        # pair (pair (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)) (big_map %tokenHolderToID address (set string))) (big_map %tokenIdToOwner string address).set string.params.pair (pair (pair (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)) (big_map %tokenHolderToID address (set string))) (big_map %tokenIdToOwner string address)) (set string)
                    DUP;        # pair (pair (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)) (big_map %tokenHolderToID address (set string))) (big_map %tokenIdToOwner string address).pair (pair (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)) (big_map %tokenHolderToID address (set string))) (big_map %tokenIdToOwner string address).set string.params.pair (pair (pair (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)) (big_map %tokenHolderToID address (set string))) (big_map %tokenIdToOwner string address)) (set string)
                    CDR;        # big_map string address.pair (pair (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)) (big_map %tokenHolderToID address (set string))) (big_map %tokenIdToOwner string address).set string.params.pair (pair (pair (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)) (big_map %tokenHolderToID address (set string))) (big_map %tokenIdToOwner string address)) (set string)
                    SWAP;       # pair (pair (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)) (big_map %tokenHolderToID address (set string))) (big_map %tokenIdToOwner string address).big_map string address.set string.params.pair (pair (pair (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)) (big_map %tokenHolderToID address (set string))) (big_map %tokenIdToOwner string address)) (set string)
                    CAR;        # pair (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)) (big_map %tokenHolderToID address (set string)).big_map string address.set string.params.pair (pair (pair (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)) (big_map %tokenHolderToID address (set string))) (big_map %tokenIdToOwner string address)) (set string)
                    DUP;        # pair (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)) (big_map %tokenHolderToID address (set string)).pair (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)) (big_map %tokenHolderToID address (set string)).big_map string address.set string.params.pair (pair (pair (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)) (big_map %tokenHolderToID address (set string))) (big_map %tokenIdToOwner string address)) (set string)
                    CAR;        # pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address).pair (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)) (big_map %tokenHolderToID address (set string)).big_map string address.set string.params.pair (pair (pair (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)) (big_map %tokenHolderToID address (set string))) (big_map %tokenIdToOwner string address)) (set string)
                    SWAP;       # pair (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)) (big_map %tokenHolderToID address (set string)).pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address).big_map string address.set string.params.pair (pair (pair (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)) (big_map %tokenHolderToID address (set string))) (big_map %tokenIdToOwner string address)) (set string)
                    CDR;        # big_map address (set string).pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address).big_map string address.set string.params.pair (pair (pair (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)) (big_map %tokenHolderToID address (set string))) (big_map %tokenIdToOwner string address)) (set string)
                    PUSH (option (set string)) (Some {}); # option (set string).big_map address (set string).pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address).big_map string address.set string.params.pair (pair (pair (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)) (big_map %tokenHolderToID address (set string))) (big_map %tokenIdToOwner string address)) (set string)
                    DIG 5;      # params.option (set string).big_map address (set string).pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address).big_map string address.set string.pair (pair (pair (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)) (big_map %tokenHolderToID address (set string))) (big_map %tokenIdToOwner string address)) (set string)
                    DUP;        # params.params.option (set string).big_map address (set string).pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address).big_map string address.set string.pair (pair (pair (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)) (big_map %tokenHolderToID address (set string))) (big_map %tokenIdToOwner string address)) (set string)
                    DUG 6;      # params.option (set string).big_map address (set string).pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address).big_map string address.set string.params.pair (pair (pair (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)) (big_map %tokenHolderToID address (set string))) (big_map %tokenIdToOwner string address)) (set string)
                    CAR;        # address.option (set string).big_map address (set string).pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address).big_map string address.set string.params.pair (pair (pair (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)) (big_map %tokenHolderToID address (set string))) (big_map %tokenIdToOwner string address)) (set string)
                    UPDATE;     # big_map address (set string).pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address).big_map string address.set string.params.pair (pair (pair (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)) (big_map %tokenHolderToID address (set string))) (big_map %tokenIdToOwner string address)) (set string)
                    SWAP;       # pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address).big_map address (set string).big_map string address.set string.params.pair (pair (pair (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)) (big_map %tokenHolderToID address (set string))) (big_map %tokenIdToOwner string address)) (set string)
                    PAIR;       # pair (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)) (big_map address (set string)).big_map string address.set string.params.pair (pair (pair (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)) (big_map %tokenHolderToID address (set string))) (big_map %tokenIdToOwner string address)) (set string)
                    PAIR;       # pair (pair (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)) (big_map address (set string))) (big_map string address).set string.params.pair (pair (pair (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)) (big_map %tokenHolderToID address (set string))) (big_map %tokenIdToOwner string address)) (set string)
                    PAIR;       # pair (pair (pair (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)) (big_map address (set string))) (big_map string address)) (set string).params.pair (pair (pair (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)) (big_map %tokenHolderToID address (set string))) (big_map %tokenIdToOwner string address)) (set string)
                    DUG 2;      # params.pair (pair (pair (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)) (big_map %tokenHolderToID address (set string))) (big_map %tokenIdToOwner string address)) (set string).pair (pair (pair (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)) (big_map address (set string))) (big_map string address)) (set string)
                    SWAP;       # pair (pair (pair (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)) (big_map %tokenHolderToID address (set string))) (big_map %tokenIdToOwner string address)) (set string).params.pair (pair (pair (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)) (big_map address (set string))) (big_map string address)) (set string)
                    DROP;       # params.pair (pair (pair (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)) (big_map address (set string))) (big_map string address)) (set string)
                  }; # params.pair (pair (pair (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)) (big_map %tokenHolderToID address (set string))) (big_map %tokenIdToOwner string address)) (set string)
                # self.data.tokenHolderToID[params.address].add(params.token_id) # params.pair (pair (pair (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)) (big_map %tokenHolderToID address (set string))) (big_map %tokenIdToOwner string address)) (set string)
                SWAP;       # pair (pair (pair (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)) (big_map %tokenHolderToID address (set string))) (big_map %tokenIdToOwner string address)) (set string).params
                DUP;        # pair (pair (pair (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)) (big_map %tokenHolderToID address (set string))) (big_map %tokenIdToOwner string address)) (set string).pair (pair (pair (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)) (big_map %tokenHolderToID address (set string))) (big_map %tokenIdToOwner string address)) (set string).params
                DUG 2;      # pair (pair (pair (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)) (big_map %tokenHolderToID address (set string))) (big_map %tokenIdToOwner string address)) (set string).params.pair (pair (pair (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)) (big_map %tokenHolderToID address (set string))) (big_map %tokenIdToOwner string address)) (set string)
                # invariant_top begin [ pair (pair (pair (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)) (big_map %tokenHolderToID address (set string))) (big_map %tokenIdToOwner string address)) (set %tokensMinted string){storage}.pair %mintDataToken (address %address) (string %token_id){params}.pair (pair (pair (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)) (big_map %tokenHolderToID address (set string))) (big_map %tokenIdToOwner string address)) (set %tokensMinted string){storage} ] # pair (pair (pair (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)) (big_map %tokenHolderToID address (set string))) (big_map %tokenIdToOwner string address)) (set string).params.pair (pair (pair (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)) (big_map %tokenHolderToID address (set string))) (big_map %tokenIdToOwner string address)) (set string)
                DUP;        # pair (pair (pair (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)) (big_map %tokenHolderToID address (set string))) (big_map %tokenIdToOwner string address)) (set string).pair (pair (pair (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)) (big_map %tokenHolderToID address (set string))) (big_map %tokenIdToOwner string address)) (set string).params.pair (pair (pair (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)) (big_map %tokenHolderToID address (set string))) (big_map %tokenIdToOwner string address)) (set string)
                CDR;        # set string.pair (pair (pair (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)) (big_map %tokenHolderToID address (set string))) (big_map %tokenIdToOwner string address)) (set string).params.pair (pair (pair (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)) (big_map %tokenHolderToID address (set string))) (big_map %tokenIdToOwner string address)) (set string)
                SWAP;       # pair (pair (pair (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)) (big_map %tokenHolderToID address (set string))) (big_map %tokenIdToOwner string address)) (set string).set string.params.pair (pair (pair (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)) (big_map %tokenHolderToID address (set string))) (big_map %tokenIdToOwner string address)) (set string)
                CAR;        # pair (pair (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)) (big_map %tokenHolderToID address (set string))) (big_map %tokenIdToOwner string address).set string.params.pair (pair (pair (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)) (big_map %tokenHolderToID address (set string))) (big_map %tokenIdToOwner string address)) (set string)
                DUP;        # pair (pair (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)) (big_map %tokenHolderToID address (set string))) (big_map %tokenIdToOwner string address).pair (pair (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)) (big_map %tokenHolderToID address (set string))) (big_map %tokenIdToOwner string address).set string.params.pair (pair (pair (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)) (big_map %tokenHolderToID address (set string))) (big_map %tokenIdToOwner string address)) (set string)
                CDR;        # big_map string address.pair (pair (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)) (big_map %tokenHolderToID address (set string))) (big_map %tokenIdToOwner string address).set string.params.pair (pair (pair (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)) (big_map %tokenHolderToID address (set string))) (big_map %tokenIdToOwner string address)) (set string)
                SWAP;       # pair (pair (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)) (big_map %tokenHolderToID address (set string))) (big_map %tokenIdToOwner string address).big_map string address.set string.params.pair (pair (pair (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)) (big_map %tokenHolderToID address (set string))) (big_map %tokenIdToOwner string address)) (set string)
                CAR;        # pair (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)) (big_map %tokenHolderToID address (set string)).big_map string address.set string.params.pair (pair (pair (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)) (big_map %tokenHolderToID address (set string))) (big_map %tokenIdToOwner string address)) (set string)
                DUP;        # pair (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)) (big_map %tokenHolderToID address (set string)).pair (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)) (big_map %tokenHolderToID address (set string)).big_map string address.set string.params.pair (pair (pair (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)) (big_map %tokenHolderToID address (set string))) (big_map %tokenIdToOwner string address)) (set string)
                CAR;        # pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address).pair (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)) (big_map %tokenHolderToID address (set string)).big_map string address.set string.params.pair (pair (pair (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)) (big_map %tokenHolderToID address (set string))) (big_map %tokenIdToOwner string address)) (set string)
                SWAP;       # pair (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)) (big_map %tokenHolderToID address (set string)).pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address).big_map string address.set string.params.pair (pair (pair (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)) (big_map %tokenHolderToID address (set string))) (big_map %tokenIdToOwner string address)) (set string)
                CDR;        # big_map address (set string).pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address).big_map string address.set string.params.pair (pair (pair (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)) (big_map %tokenHolderToID address (set string))) (big_map %tokenIdToOwner string address)) (set string)
                DUP;        # big_map address (set string).big_map address (set string).pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address).big_map string address.set string.params.pair (pair (pair (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)) (big_map %tokenHolderToID address (set string))) (big_map %tokenIdToOwner string address)) (set string)
                DIG 5;      # params.big_map address (set string).big_map address (set string).pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address).big_map string address.set string.pair (pair (pair (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)) (big_map %tokenHolderToID address (set string))) (big_map %tokenIdToOwner string address)) (set string)
                DUP;        # params.params.big_map address (set string).big_map address (set string).pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address).big_map string address.set string.pair (pair (pair (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)) (big_map %tokenHolderToID address (set string))) (big_map %tokenIdToOwner string address)) (set string)
                DUG 6;      # params.big_map address (set string).big_map address (set string).pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address).big_map string address.set string.params.pair (pair (pair (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)) (big_map %tokenHolderToID address (set string))) (big_map %tokenIdToOwner string address)) (set string)
                CAR;        # address.big_map address (set string).big_map address (set string).pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address).big_map string address.set string.params.pair (pair (pair (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)) (big_map %tokenHolderToID address (set string))) (big_map %tokenIdToOwner string address)) (set string)
                DUP;        # address.address.big_map address (set string).big_map address (set string).pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address).big_map string address.set string.params.pair (pair (pair (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)) (big_map %tokenHolderToID address (set string))) (big_map %tokenIdToOwner string address)) (set string)
                DUG 2;      # address.big_map address (set string).address.big_map address (set string).pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address).big_map string address.set string.params.pair (pair (pair (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)) (big_map %tokenHolderToID address (set string))) (big_map %tokenIdToOwner string address)) (set string)
                GET;        # option (set string).address.big_map address (set string).pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address).big_map string address.set string.params.pair (pair (pair (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)) (big_map %tokenHolderToID address (set string))) (big_map %tokenIdToOwner string address)) (set string)
                IF_SOME
                  {
                    # of_some: set_in_top-nil-some # set string.address.big_map address (set string).pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address).big_map string address.set string.params.pair (pair (pair (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)) (big_map %tokenHolderToID address (set string))) (big_map %tokenIdToOwner string address)) (set string)
                  }
                  {
                    PUSH string "set_in_top-nil-some"; # string.address.big_map address (set string).pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address).big_map string address.set string.params.pair (pair (pair (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)) (big_map %tokenHolderToID address (set string))) (big_map %tokenIdToOwner string address)) (set string)
                    FAILWITH;   # FAILED
                  }; # set string.address.big_map address (set string).pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address).big_map string address.set string.params.pair (pair (pair (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)) (big_map %tokenHolderToID address (set string))) (big_map %tokenIdToOwner string address)) (set string)
                PUSH bool True; # bool.set string.address.big_map address (set string).pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address).big_map string address.set string.params.pair (pair (pair (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)) (big_map %tokenHolderToID address (set string))) (big_map %tokenIdToOwner string address)) (set string)
                DIG 7;      # params.bool.set string.address.big_map address (set string).pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address).big_map string address.set string.pair (pair (pair (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)) (big_map %tokenHolderToID address (set string))) (big_map %tokenIdToOwner string address)) (set string)
                DUP;        # params.params.bool.set string.address.big_map address (set string).pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address).big_map string address.set string.pair (pair (pair (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)) (big_map %tokenHolderToID address (set string))) (big_map %tokenIdToOwner string address)) (set string)
                DUG 8;      # params.bool.set string.address.big_map address (set string).pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address).big_map string address.set string.params.pair (pair (pair (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)) (big_map %tokenHolderToID address (set string))) (big_map %tokenIdToOwner string address)) (set string)
                CDR;        # string.bool.set string.address.big_map address (set string).pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address).big_map string address.set string.params.pair (pair (pair (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)) (big_map %tokenHolderToID address (set string))) (big_map %tokenIdToOwner string address)) (set string)
                UPDATE;     # set string.address.big_map address (set string).pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address).big_map string address.set string.params.pair (pair (pair (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)) (big_map %tokenHolderToID address (set string))) (big_map %tokenIdToOwner string address)) (set string)
                SWAP;       # address.set string.big_map address (set string).pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address).big_map string address.set string.params.pair (pair (pair (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)) (big_map %tokenHolderToID address (set string))) (big_map %tokenIdToOwner string address)) (set string)
                SOME;       # option address.set string.big_map address (set string).pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address).big_map string address.set string.params.pair (pair (pair (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)) (big_map %tokenHolderToID address (set string))) (big_map %tokenIdToOwner string address)) (set string)
                Internal error: Compiler error:
  Message      : UPDATE on option address.set string.big_map address (set string).pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address).big_map string address.set string.pair %mintDataToken (address %address) (string %token_id){params}.pair (pair (pair (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)) (big_map %tokenHolderToID address (set string))) (big_map %tokenIdToOwner string address)) (set %tokensMinted string){storage}
  Input stack  : option address.set string.big_map address (set string).pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address).big_map string address.set string.pair %mintDataToken (address %address) (string %token_id){params}.pair (pair (pair (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)) (big_map %tokenHolderToID address (set string))) (big_map %tokenIdToOwner string address)) (set %tokensMinted string){storage}
  Instruction  : MIupdate
 # option address.set string.big_map address (set string).pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address).big_map string address.set string.pair %mintDataToken (address %address) (string %token_id){params}.pair (pair (pair (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)) (big_map %tokenHolderToID address (set string))) (big_map %tokenIdToOwner string address)) (set string)
                UPDATE;      Internal error: UPDATE on option address.set string.big_map address (set string).pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address).big_map string address.set string.pair %mintDataToken (address %address) (string %token_id){params}.pair (pair (pair (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)) (big_map %tokenHolderToID address (set string))) (big_map %tokenIdToOwner string address)) (set string)
                SWAP;        Internal error: previous type error
                PAIR;        Internal error: previous type error
                PAIR;        Internal error: previous type error
                PAIR;        Internal error: previous type error
                # invariant_top end [ pair (pair (pair (set string) (option address)) (big_map address (set string))) (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)).big_map string address.set string.pair %mintDataToken (address %address) (string %token_id){params}.pair (pair (pair (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)) (big_map %tokenHolderToID address (set string))) (big_map %tokenIdToOwner string address)) (set %tokensMinted string){storage} ]  Internal error: previous type error
                DUG 4;       Internal error: previous type error
                DIG 3;       Internal error: previous type error
                DROP;        Internal error: previous type error
                # self.data.tokenIdToOwner[params.token_id] = params.address  Internal error: previous type error
                DIG 3;       Internal error: previous type error
                DUP;         Internal error: previous type error
                DUG 4;       Internal error: previous type error
                Internal error: set_in_top: cannot find 'tokenIdToOwner' in '(pair (pair (pair (set string) (option address)) (big_map address (set string))) (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)))'   Internal error: previous type error
                DUG 4;       Internal error: previous type error
                DIG 3;       Internal error: previous type error
                DROP;        Internal error: previous type error
                # if ~ (self.data.ownerToBalance.contains(params.address)):  Internal error: previous type error
                DIG 3;       Internal error: previous type error
                DUP;         Internal error: previous type error
                DUG 4;       Internal error: previous type error
                Internal error: Compiler error:
  Message      : CAAAAADR on pair (pair (pair (set string) (option address)) (big_map address (set string))) (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)){storage}.big_map string address.set string.pair %mintDataToken (address %address) (string %token_id){params}.pair (pair (pair (set string) (option address)) (big_map address (set string))) (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)){storage}
  Input stack  : pair (pair (pair (set string) (option address)) (big_map address (set string))) (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)){storage}.big_map string address.set string.pair %mintDataToken (address %address) (string %token_id){params}.pair (pair (pair (set string) (option address)) (big_map address (set string))) (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)){storage}
  Instruction  : (MIfield [A; A; A; A; A; D])
  Internal error: previous type error
                CAAAAADR;    Internal error: previous type error
                DIG 3;       Internal error: previous type error
                DUP;         Internal error: previous type error
                DUG 4;       Internal error: previous type error
                CAR;         Internal error: previous type error
                Internal error: Compiler error:
  Message      : MEM on address.pair (pair (pair (set string) (option address)) (big_map address (set string))) (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)){storage}.big_map string address.set string.pair %mintDataToken (address %address) (string %token_id){params}.pair (pair (pair (set string) (option address)) (big_map address (set string))) (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)){storage}
  Input stack  : address.pair (pair (pair (set string) (option address)) (big_map address (set string))) (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)){storage}.big_map string address.set string.pair %mintDataToken (address %address) (string %token_id){params}.pair (pair (pair (set string) (option address)) (big_map address (set string))) (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)){storage}
  Instruction  : MImem
  Internal error: previous type error
                MEM;         Internal error: previous type error
                Internal error: Compiler error:
  Message      : NOT on address.pair (pair (pair (set string) (option address)) (big_map address (set string))) (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)){storage}.big_map string address.set string.pair %mintDataToken (address %address) (string %token_id){params}.pair (pair (pair (set string) (option address)) (big_map address (set string))) (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)){storage}
  Input stack  : address.pair (pair (pair (set string) (option address)) (big_map address (set string))) (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)){storage}.big_map string address.set string.pair %mintDataToken (address %address) (string %token_id){params}.pair (pair (pair (set string) (option address)) (big_map address (set string))) (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)){storage}
  Instruction  : MInot
  Internal error: previous type error
                NOT;         Internal error: previous type error
                Internal error: mi_if  Internal error: previous type error
                # self.data.ownerToBalance[params.address] += 1  Internal error: previous type error
                SWAP;        Internal error: previous type error
                DUP;         Internal error: previous type error
                DUG 2;       Internal error: previous type error
                # invariant_top begin [ pair (pair (pair (set string) (option address)) (big_map address (set string))) (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)){storage}.address.pair (pair (pair (set string) (option address)) (big_map address (set string))) (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)){storage}.big_map string address.set string.pair %mintDataToken (address %address) (string %token_id){params}.pair (pair (pair (set string) (option address)) (big_map address (set string))) (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)){storage} ]  Internal error: previous type error
                DUP;         Internal error: previous type error
                CAR;         Internal error: previous type error
                SWAP;        Internal error: previous type error
                CDR;         Internal error: previous type error
                DUP;         Internal error: previous type error
                CDR;         Internal error: previous type error
                SWAP;        Internal error: previous type error
                CAR;         Internal error: previous type error
                DUP;         Internal error: previous type error
                CDR;         Internal error: previous type error
                SWAP;        Internal error: previous type error
                CAR;         Internal error: previous type error
                DUP;         Internal error: previous type error
                CAR;         Internal error: previous type error
                SWAP;        Internal error: previous type error
                CDR;         Internal error: previous type error
                PUSH int 1;  Internal error: previous type error
                DIG 7;       Internal error: previous type error
                DUP;         Internal error: previous type error
                DUG 8;       Internal error: previous type error
                Internal error: Compiler error:
  Message      : CAAAAADR on pair (pair (pair (set string) (option address)) (big_map address (set string))) (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)){storage}.int.big_map address int.pair (address %admin) (string %name).string.big_map string address.pair (pair (set string) (option address)) (big_map address (set string)).address.pair (pair (pair (set string) (option address)) (big_map address (set string))) (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)){storage}.big_map string address.set string.pair %mintDataToken (address %address) (string %token_id){params}.pair (pair (pair (set string) (option address)) (big_map address (set string))) (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)){storage}
  Input stack  : pair (pair (pair (set string) (option address)) (big_map address (set string))) (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)){storage}.int.big_map address int.pair (address %admin) (string %name).string.big_map string address.pair (pair (set string) (option address)) (big_map address (set string)).address.pair (pair (pair (set string) (option address)) (big_map address (set string))) (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)){storage}.big_map string address.set string.pair %mintDataToken (address %address) (string %token_id){params}.pair (pair (pair (set string) (option address)) (big_map address (set string))) (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)){storage}
  Instruction  : (MIfield [A; A; A; A; A; D])
  Internal error: previous type error
                CAAAAADR;    Internal error: previous type error
                DIG 11;      Internal error: previous type error
                DUP;         Internal error: previous type error
                DUG 12;      Internal error: previous type error
                CAR;         Internal error: previous type error
                Internal error: Compiler error:
  Message      : GET on address.pair (pair (pair (set string) (option address)) (big_map address (set string))) (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)){storage}.int.big_map address int.pair (address %admin) (string %name).string.big_map string address.pair (pair (set string) (option address)) (big_map address (set string)).address.pair (pair (pair (set string) (option address)) (big_map address (set string))) (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)){storage}.big_map string address.set string.pair %mintDataToken (address %address) (string %token_id){params}.pair (pair (pair (set string) (option address)) (big_map address (set string))) (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)){storage}
  Input stack  : address.pair (pair (pair (set string) (option address)) (big_map address (set string))) (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)){storage}.int.big_map address int.pair (address %admin) (string %name).string.big_map string address.pair (pair (set string) (option address)) (big_map address (set string)).address.pair (pair (pair (set string) (option address)) (big_map address (set string))) (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)){storage}.big_map string address.set string.pair %mintDataToken (address %address) (string %token_id){params}.pair (pair (pair (set string) (option address)) (big_map address (set string))) (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)){storage}
  Instruction  : MIget
  Internal error: previous type error
                GET;         Internal error: previous type error
                Internal error: mi_if_some  Internal error: previous type error
                Internal error: Compiler error:
  Message      : ADD on address.pair (pair (pair (set string) (option address)) (big_map address (set string))) (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)){storage}.int.big_map address int.pair (address %admin) (string %name).string.big_map string address.pair (pair (set string) (option address)) (big_map address (set string)).address.pair (pair (pair (set string) (option address)) (big_map address (set string))) (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)){storage}.big_map string address.set string.pair %mintDataToken (address %address) (string %token_id){params}.pair (pair (pair (set string) (option address)) (big_map address (set string))) (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)){storage}
  Input stack  : address.pair (pair (pair (set string) (option address)) (big_map address (set string))) (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)){storage}.int.big_map address int.pair (address %admin) (string %name).string.big_map string address.pair (pair (set string) (option address)) (big_map address (set string)).address.pair (pair (pair (set string) (option address)) (big_map address (set string))) (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)){storage}.big_map string address.set string.pair %mintDataToken (address %address) (string %token_id){params}.pair (pair (pair (set string) (option address)) (big_map address (set string))) (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)){storage}
  Instruction  : MIadd
  Internal error: previous type error
                ADD;         Internal error: previous type error
                SOME;        Internal error: previous type error
                DIG 12;      Internal error: previous type error
                DUP;         Internal error: previous type error
                DUG 13;      Internal error: previous type error
                CAR;         Internal error: previous type error
                Internal error: Compiler error:
  Message      : UPDATE on address.option address.pair (pair (pair (set string) (option address)) (big_map address (set string))) (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)){storage}.int.big_map address int.pair (address %admin) (string %name).string.big_map string address.pair (pair (set string) (option address)) (big_map address (set string)).address.pair (pair (pair (set string) (option address)) (big_map address (set string))) (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)){storage}.big_map string address.set string.pair %mintDataToken (address %address) (string %token_id){params}.pair (pair (pair (set string) (option address)) (big_map address (set string))) (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)){storage}
  Input stack  : address.option address.pair (pair (pair (set string) (option address)) (big_map address (set string))) (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)){storage}.int.big_map address int.pair (address %admin) (string %name).string.big_map string address.pair (pair (set string) (option address)) (big_map address (set string)).address.pair (pair (pair (set string) (option address)) (big_map address (set string))) (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)){storage}.big_map string address.set string.pair %mintDataToken (address %address) (string %token_id){params}.pair (pair (pair (set string) (option address)) (big_map address (set string))) (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)){storage}
  Instruction  : MIupdate
  Internal error: previous type error
                UPDATE;      Internal error: previous type error
                SWAP;        Internal error: previous type error
                PAIR;        Internal error: previous type error
                PAIR;        Internal error: previous type error
                PAIR;        Internal error: previous type error
                SWAP;        Internal error: previous type error
                PAIR;        Internal error: previous type error
                # invariant_top end [ pair (big_map address int) (pair (pair (pair (option address) address) (pair (pair (pair (set string) (option address)) (big_map address (set string))) (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)))) int){pair(_, pair(pair(_, storage), _))}.pair (address %admin) (string %name).string.big_map string address.pair (pair (set string) (option address)) (big_map address (set string)).address.pair (pair (pair (set string) (option address)) (big_map address (set string))) (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)){storage}.big_map string address.set string.pair %mintDataToken (address %address) (string %token_id){params}.pair (pair (pair (set string) (option address)) (big_map address (set string))) (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)){storage} ]  Internal error: previous type error
                DUG 6;       Internal error: previous type error
                DIG 5;       Internal error: previous type error
                DROP;        Internal error: previous type error
                DIG 8;       Internal error: previous type error
                DROP;        Internal error: previous type error
              };  Internal error: UPDATE on option address.set string.big_map address (set string).pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address).big_map string address.set string.pair %mintDataToken (address %address) (string %token_id){params}.pair (pair (pair (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)) (big_map %tokenHolderToID address (set string))) (big_map %tokenIdToOwner string address)) (set string)
            Internal error: Cannot unify branches [pair (pair (pair (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)) (big_map %tokenHolderToID address (set string))) (big_map %tokenIdToOwner string address)) (set %tokensMinted string){storage}] [pair (address %admin) (string %name).string.big_map string address.pair (pair (set string) (option address)) (big_map address (set string)).address.pair (big_map address int) (pair (pair (pair (option address) address) (pair (pair (pair (set string) (option address)) (big_map address (set string))) (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)))) int){storage}.big_map string address.set string.pair (pair (pair (set string) (option address)) (big_map address (set string))) (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)){storage}]  Internal error: previous type error
          }
          {
            # Entry point: transfer # params.storage
            # sp.verify(self.data.tokensMinted.contains(params.token_id)) # params.storage
            SWAP;       # storage.params
            DUP;        # storage.storage.params
            DUG 2;      # storage.params.storage
            CDR;        # set string.params.storage
            SWAP;       # params.set string.storage
            DUP;        # params.params.set string.storage
            DUG 2;      # params.set string.params.storage
            CDR;        # string.set string.params.storage
            MEM;        # bool.params.storage
            IF
              {}
              {
                PUSH string "WrongCondition: self.data.tokensMinted.contains(params.token_id)"; # string.params.storage
                FAILWITH;   # FAILED
              }; # params.storage
            # sp.verify(self.data.tokenIdToOwner[params.token_id] == sp.sender) # params.storage
            SENDER;     # address.params.storage
            DIG 2;      # storage.address.params
            DUP;        # storage.storage.address.params
            DUG 3;      # storage.address.params.storage
            CADR;       # big_map string address.address.params.storage
            DIG 2;      # params.big_map string address.address.storage
            DUP;        # params.params.big_map string address.address.storage
            DUG 3;      # params.big_map string address.address.params.storage
            CDR;        # string.big_map string address.address.params.storage
            GET;        # option address.address.params.storage
            IF_SOME
              {
                # of_some: Get-item:57 # address.address.params.storage
              }
              {
                PUSH string "Get-item:57"; # string.address.params.storage
                FAILWITH;   # FAILED
              }; # address.address.params.storage
            COMPARE;    # int.params.storage
            EQ;         # bool.params.storage
            IF
              {}
              {
                PUSH string "WrongCondition: self.data.tokenIdToOwner[params.token_id] == sp.sender"; # string.params.storage
                FAILWITH;   # FAILED
              }; # params.storage
            # self.data.tokenHolderToID[sp.sender].remove(params.token_id) # params.storage
            SWAP;       # storage.params
            DUP;        # storage.storage.params
            DUG 2;      # storage.params.storage
            # invariant_top begin [ pair (pair (pair (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)) (big_map %tokenHolderToID address (set string))) (big_map %tokenIdToOwner string address)) (set %tokensMinted string){storage}.pair %transfer (address %to) (string %token_id){params}.pair (pair (pair (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)) (big_map %tokenHolderToID address (set string))) (big_map %tokenIdToOwner string address)) (set %tokensMinted string){storage} ] # storage.params.storage
            DUP;        # storage.storage.params.storage
            CDR;        # set string.storage.params.storage
            SWAP;       # storage.set string.params.storage
            CAR;        # pair (pair (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)) (big_map %tokenHolderToID address (set string))) (big_map %tokenIdToOwner string address).set string.params.storage
            DUP;        # pair (pair (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)) (big_map %tokenHolderToID address (set string))) (big_map %tokenIdToOwner string address).pair (pair (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)) (big_map %tokenHolderToID address (set string))) (big_map %tokenIdToOwner string address).set string.params.storage
            CDR;        # big_map string address.pair (pair (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)) (big_map %tokenHolderToID address (set string))) (big_map %tokenIdToOwner string address).set string.params.storage
            SWAP;       # pair (pair (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)) (big_map %tokenHolderToID address (set string))) (big_map %tokenIdToOwner string address).big_map string address.set string.params.storage
            CAR;        # pair (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)) (big_map %tokenHolderToID address (set string)).big_map string address.set string.params.storage
            DUP;        # pair (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)) (big_map %tokenHolderToID address (set string)).pair (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)) (big_map %tokenHolderToID address (set string)).big_map string address.set string.params.storage
            CAR;        # pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address).pair (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)) (big_map %tokenHolderToID address (set string)).big_map string address.set string.params.storage
            SWAP;       # pair (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)) (big_map %tokenHolderToID address (set string)).pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address).big_map string address.set string.params.storage
            CDR;        # big_map address (set string).pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address).big_map string address.set string.params.storage
            DUP;        # big_map address (set string).big_map address (set string).pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address).big_map string address.set string.params.storage
            SENDER;     # address.big_map address (set string).big_map address (set string).pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address).big_map string address.set string.params.storage
            DUP;        # address.address.big_map address (set string).big_map address (set string).pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address).big_map string address.set string.params.storage
            DUG 2;      # address.big_map address (set string).address.big_map address (set string).pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address).big_map string address.set string.params.storage
            GET;        # option (set string).address.big_map address (set string).pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address).big_map string address.set string.params.storage
            IF_SOME
              {
                # of_some: set_in_top-nil-some # set string.address.big_map address (set string).pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address).big_map string address.set string.params.storage
              }
              {
                PUSH string "set_in_top-nil-some"; # string.address.big_map address (set string).pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address).big_map string address.set string.params.storage
                FAILWITH;   # FAILED
              }; # set string.address.big_map address (set string).pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address).big_map string address.set string.params.storage
            PUSH bool False; # bool.set string.address.big_map address (set string).pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address).big_map string address.set string.params.storage
            DIG 7;      # params.bool.set string.address.big_map address (set string).pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address).big_map string address.set string.storage
            DUP;        # params.params.bool.set string.address.big_map address (set string).pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address).big_map string address.set string.storage
            DUG 8;      # params.bool.set string.address.big_map address (set string).pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address).big_map string address.set string.params.storage
            CDR;        # string.bool.set string.address.big_map address (set string).pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address).big_map string address.set string.params.storage
            UPDATE;     # set string.address.big_map address (set string).pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address).big_map string address.set string.params.storage
            SWAP;       # address.set string.big_map address (set string).pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address).big_map string address.set string.params.storage
            SOME;       # option address.set string.big_map address (set string).pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address).big_map string address.set string.params.storage
            Internal error: Compiler error:
  Message      : UPDATE on option address.set string.big_map address (set string).pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address).big_map string address.set string.pair %transfer (address %to) (string %token_id){params}.pair (pair (pair (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)) (big_map %tokenHolderToID address (set string))) (big_map %tokenIdToOwner string address)) (set %tokensMinted string){storage}
  Input stack  : option address.set string.big_map address (set string).pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address).big_map string address.set string.pair %transfer (address %to) (string %token_id){params}.pair (pair (pair (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)) (big_map %tokenHolderToID address (set string))) (big_map %tokenIdToOwner string address)) (set %tokensMinted string){storage}
  Instruction  : MIupdate
 # option address.set string.big_map address (set string).pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address).big_map string address.set string.pair %transfer (address %to) (string %token_id){params}.pair (pair (pair (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)) (big_map %tokenHolderToID address (set string))) (big_map %tokenIdToOwner string address)) (set %tokensMinted string){storage}
            UPDATE;      Internal error: UPDATE on option address.set string.big_map address (set string).pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address).big_map string address.set string.pair %transfer (address %to) (string %token_id){params}.pair (pair (pair (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)) (big_map %tokenHolderToID address (set string))) (big_map %tokenIdToOwner string address)) (set %tokensMinted string){storage}
            SWAP;        Internal error: previous type error
            PAIR;        Internal error: previous type error
            PAIR;        Internal error: previous type error
            PAIR;        Internal error: previous type error
            # invariant_top end [ pair (pair (pair (set string) (option address)) (big_map address (set string))) (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)).big_map string address.set string.pair %transfer (address %to) (string %token_id){params}.pair (pair (pair (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)) (big_map %tokenHolderToID address (set string))) (big_map %tokenIdToOwner string address)) (set %tokensMinted string){storage} ]  Internal error: previous type error
            DUG 4;       Internal error: previous type error
            DIG 3;       Internal error: previous type error
            DROP;        Internal error: previous type error
            # if ~ (self.data.ownerToBalance.contains(params.to)):  Internal error: previous type error
            DIG 3;       Internal error: previous type error
            DUP;         Internal error: previous type error
            DUG 4;       Internal error: previous type error
            Internal error: Compiler error:
  Message      : CAAAAADR on pair (pair (pair (set string) (option address)) (big_map address (set string))) (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)){storage}.big_map string address.set string.pair %transfer (address %to) (string %token_id){params}.pair (pair (pair (set string) (option address)) (big_map address (set string))) (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)){storage}
  Input stack  : pair (pair (pair (set string) (option address)) (big_map address (set string))) (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)){storage}.big_map string address.set string.pair %transfer (address %to) (string %token_id){params}.pair (pair (pair (set string) (option address)) (big_map address (set string))) (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)){storage}
  Instruction  : (MIfield [A; A; A; A; A; D])
  Internal error: previous type error
            CAAAAADR;    Internal error: previous type error
            DIG 3;       Internal error: previous type error
            DUP;         Internal error: previous type error
            DUG 4;       Internal error: previous type error
            CAR;         Internal error: previous type error
            Internal error: Compiler error:
  Message      : MEM on address.pair (pair (pair (set string) (option address)) (big_map address (set string))) (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)){storage}.big_map string address.set string.pair %transfer (address %to) (string %token_id){params}.pair (pair (pair (set string) (option address)) (big_map address (set string))) (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)){storage}
  Input stack  : address.pair (pair (pair (set string) (option address)) (big_map address (set string))) (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)){storage}.big_map string address.set string.pair %transfer (address %to) (string %token_id){params}.pair (pair (pair (set string) (option address)) (big_map address (set string))) (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)){storage}
  Instruction  : MImem
  Internal error: previous type error
            MEM;         Internal error: previous type error
            Internal error: Compiler error:
  Message      : NOT on address.pair (pair (pair (set string) (option address)) (big_map address (set string))) (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)){storage}.big_map string address.set string.pair %transfer (address %to) (string %token_id){params}.pair (pair (pair (set string) (option address)) (big_map address (set string))) (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)){storage}
  Input stack  : address.pair (pair (pair (set string) (option address)) (big_map address (set string))) (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)){storage}.big_map string address.set string.pair %transfer (address %to) (string %token_id){params}.pair (pair (pair (set string) (option address)) (big_map address (set string))) (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)){storage}
  Instruction  : MInot
  Internal error: previous type error
            NOT;         Internal error: previous type error
            Internal error: mi_if  Internal error: previous type error
            # self.data.tokenHolderToID[params.to].add(params.token_id)  Internal error: previous type error
            SWAP;        Internal error: previous type error
            DUP;         Internal error: previous type error
            DUG 2;       Internal error: previous type error
            Internal error: set_in_top: cannot find 'tokenHolderToID' in '(pair (pair (pair (set string) (option address)) (big_map address (set string))) (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)))'   Internal error: previous type error
            DUG 2;       Internal error: previous type error
            SWAP;        Internal error: previous type error
            DROP;        Internal error: previous type error
            # self.data.tokenIdToOwner[params.token_id] = params.to  Internal error: previous type error
            SWAP;        Internal error: previous type error
            DUP;         Internal error: previous type error
            DUG 2;       Internal error: previous type error
            Internal error: set_in_top: cannot find 'tokenIdToOwner' in '(pair (pair (pair (set string) (option address)) (big_map address (set string))) (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)))'   Internal error: previous type error
            DUG 2;       Internal error: previous type error
            SWAP;        Internal error: previous type error
            DROP;        Internal error: previous type error
            # self.data.ownerToBalance[sp.sender] -= 1  Internal error: previous type error
            SWAP;        Internal error: previous type error
            DUP;         Internal error: previous type error
            DUG 2;       Internal error: previous type error
            # invariant_top begin [ pair (pair (pair (set string) (option address)) (big_map address (set string))) (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)){storage}.address.pair (pair (pair (set string) (option address)) (big_map address (set string))) (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)){storage}.big_map string address.set string.pair %transfer (address %to) (string %token_id){params}.pair (pair (pair (set string) (option address)) (big_map address (set string))) (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)){storage} ]  Internal error: previous type error
            DUP;         Internal error: previous type error
            CAR;         Internal error: previous type error
            SWAP;        Internal error: previous type error
            CDR;         Internal error: previous type error
            DUP;         Internal error: previous type error
            CDR;         Internal error: previous type error
            SWAP;        Internal error: previous type error
            CAR;         Internal error: previous type error
            DUP;         Internal error: previous type error
            CDR;         Internal error: previous type error
            SWAP;        Internal error: previous type error
            CAR;         Internal error: previous type error
            DUP;         Internal error: previous type error
            CAR;         Internal error: previous type error
            SWAP;        Internal error: previous type error
            CDR;         Internal error: previous type error
            PUSH int 1;  Internal error: previous type error
            DIG 7;       Internal error: previous type error
            DUP;         Internal error: previous type error
            DUG 8;       Internal error: previous type error
            Internal error: Compiler error:
  Message      : CAAAAADR on pair (pair (pair (set string) (option address)) (big_map address (set string))) (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)){storage}.int.big_map address int.pair (address %admin) (string %name).string.big_map string address.pair (pair (set string) (option address)) (big_map address (set string)).address.pair (pair (pair (set string) (option address)) (big_map address (set string))) (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)){storage}.big_map string address.set string.pair %transfer (address %to) (string %token_id){params}.pair (pair (pair (set string) (option address)) (big_map address (set string))) (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)){storage}
  Input stack  : pair (pair (pair (set string) (option address)) (big_map address (set string))) (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)){storage}.int.big_map address int.pair (address %admin) (string %name).string.big_map string address.pair (pair (set string) (option address)) (big_map address (set string)).address.pair (pair (pair (set string) (option address)) (big_map address (set string))) (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)){storage}.big_map string address.set string.pair %transfer (address %to) (string %token_id){params}.pair (pair (pair (set string) (option address)) (big_map address (set string))) (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)){storage}
  Instruction  : (MIfield [A; A; A; A; A; D])
  Internal error: previous type error
            CAAAAADR;    Internal error: previous type error
            SENDER;      Internal error: previous type error
            Internal error: Compiler error:
  Message      : GET on address.pair (pair (pair (set string) (option address)) (big_map address (set string))) (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)){storage}.int.big_map address int.pair (address %admin) (string %name).string.big_map string address.pair (pair (set string) (option address)) (big_map address (set string)).address.pair (pair (pair (set string) (option address)) (big_map address (set string))) (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)){storage}.big_map string address.set string.pair %transfer (address %to) (string %token_id){params}.pair (pair (pair (set string) (option address)) (big_map address (set string))) (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)){storage}
  Input stack  : address.pair (pair (pair (set string) (option address)) (big_map address (set string))) (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)){storage}.int.big_map address int.pair (address %admin) (string %name).string.big_map string address.pair (pair (set string) (option address)) (big_map address (set string)).address.pair (pair (pair (set string) (option address)) (big_map address (set string))) (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)){storage}.big_map string address.set string.pair %transfer (address %to) (string %token_id){params}.pair (pair (pair (set string) (option address)) (big_map address (set string))) (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)){storage}
  Instruction  : MIget
  Internal error: previous type error
            GET;         Internal error: previous type error
            Internal error: mi_if_some  Internal error: previous type error
            Internal error: Compiler error:
  Message      : SUB on address.pair (pair (pair (set string) (option address)) (big_map address (set string))) (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)){storage}.int.big_map address int.pair (address %admin) (string %name).string.big_map string address.pair (pair (set string) (option address)) (big_map address (set string)).address.pair (pair (pair (set string) (option address)) (big_map address (set string))) (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)){storage}.big_map string address.set string.pair %transfer (address %to) (string %token_id){params}.pair (pair (pair (set string) (option address)) (big_map address (set string))) (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)){storage}
  Input stack  : address.pair (pair (pair (set string) (option address)) (big_map address (set string))) (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)){storage}.int.big_map address int.pair (address %admin) (string %name).string.big_map string address.pair (pair (set string) (option address)) (big_map address (set string)).address.pair (pair (pair (set string) (option address)) (big_map address (set string))) (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)){storage}.big_map string address.set string.pair %transfer (address %to) (string %token_id){params}.pair (pair (pair (set string) (option address)) (big_map address (set string))) (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)){storage}
  Instruction  : MIsub
  Internal error: previous type error
            SUB;         Internal error: previous type error
            SOME;        Internal error: previous type error
            SENDER;      Internal error: previous type error
            Internal error: Compiler error:
  Message      : UPDATE on address.option address.pair (pair (pair (set string) (option address)) (big_map address (set string))) (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)){storage}.int.big_map address int.pair (address %admin) (string %name).string.big_map string address.pair (pair (set string) (option address)) (big_map address (set string)).address.pair (pair (pair (set string) (option address)) (big_map address (set string))) (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)){storage}.big_map string address.set string.pair %transfer (address %to) (string %token_id){params}.pair (pair (pair (set string) (option address)) (big_map address (set string))) (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)){storage}
  Input stack  : address.option address.pair (pair (pair (set string) (option address)) (big_map address (set string))) (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)){storage}.int.big_map address int.pair (address %admin) (string %name).string.big_map string address.pair (pair (set string) (option address)) (big_map address (set string)).address.pair (pair (pair (set string) (option address)) (big_map address (set string))) (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)){storage}.big_map string address.set string.pair %transfer (address %to) (string %token_id){params}.pair (pair (pair (set string) (option address)) (big_map address (set string))) (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)){storage}
  Instruction  : MIupdate
  Internal error: previous type error
            UPDATE;      Internal error: previous type error
            SWAP;        Internal error: previous type error
            PAIR;        Internal error: previous type error
            PAIR;        Internal error: previous type error
            PAIR;        Internal error: previous type error
            SWAP;        Internal error: previous type error
            PAIR;        Internal error: previous type error
            # invariant_top end [ pair (big_map address int) (pair (pair (pair (option address) address) (pair (pair (pair (set string) (option address)) (big_map address (set string))) (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)))) int){pair(_, pair(pair(_, storage), _))}.pair (address %admin) (string %name).string.big_map string address.pair (pair (set string) (option address)) (big_map address (set string)).address.pair (pair (pair (set string) (option address)) (big_map address (set string))) (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)){storage}.big_map string address.set string.pair %transfer (address %to) (string %token_id){params}.pair (pair (pair (set string) (option address)) (big_map address (set string))) (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)){storage} ]  Internal error: previous type error
            DUG 6;       Internal error: previous type error
            DIG 5;       Internal error: previous type error
            DROP;        Internal error: previous type error
            # if ~ (self.data.ownerToBalance.contains(params.to)):  Internal error: previous type error
            DIG 5;       Internal error: previous type error
            DUP;         Internal error: previous type error
            DUG 6;       Internal error: previous type error
            Internal error: Compiler error:
  Message      : CAAAAADR on pair (big_map address int) (pair (pair (pair (option address) address) (pair (pair (pair (set string) (option address)) (big_map address (set string))) (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)))) int){storage}.pair (address %admin) (string %name).string.big_map string address.pair (pair (set string) (option address)) (big_map address (set string)).address.pair (big_map address int) (pair (pair (pair (option address) address) (pair (pair (pair (set string) (option address)) (big_map address (set string))) (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)))) int){storage}.big_map string address.set string.pair %transfer (address %to) (string %token_id){params}.pair (pair (pair (set string) (option address)) (big_map address (set string))) (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)){storage}
  Input stack  : pair (big_map address int) (pair (pair (pair (option address) address) (pair (pair (pair (set string) (option address)) (big_map address (set string))) (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)))) int){storage}.pair (address %admin) (string %name).string.big_map string address.pair (pair (set string) (option address)) (big_map address (set string)).address.pair (big_map address int) (pair (pair (pair (option address) address) (pair (pair (pair (set string) (option address)) (big_map address (set string))) (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)))) int){storage}.big_map string address.set string.pair %transfer (address %to) (string %token_id){params}.pair (pair (pair (set string) (option address)) (big_map address (set string))) (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)){storage}
  Instruction  : (MIfield [A; A; A; A; A; D])
  Internal error: previous type error
            CAAAAADR;    Internal error: previous type error
            DIG 9;       Internal error: previous type error
            DUP;         Internal error: previous type error
            DUG 10;      Internal error: previous type error
            CAR;         Internal error: previous type error
            Internal error: Compiler error:
  Message      : MEM on address.pair (big_map address int) (pair (pair (pair (option address) address) (pair (pair (pair (set string) (option address)) (big_map address (set string))) (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)))) int){storage}.pair (address %admin) (string %name).string.big_map string address.pair (pair (set string) (option address)) (big_map address (set string)).address.pair (big_map address int) (pair (pair (pair (option address) address) (pair (pair (pair (set string) (option address)) (big_map address (set string))) (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)))) int){storage}.big_map string address.set string.pair %transfer (address %to) (string %token_id){params}.pair (pair (pair (set string) (option address)) (big_map address (set string))) (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)){storage}
  Input stack  : address.pair (big_map address int) (pair (pair (pair (option address) address) (pair (pair (pair (set string) (option address)) (big_map address (set string))) (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)))) int){storage}.pair (address %admin) (string %name).string.big_map string address.pair (pair (set string) (option address)) (big_map address (set string)).address.pair (big_map address int) (pair (pair (pair (option address) address) (pair (pair (pair (set string) (option address)) (big_map address (set string))) (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)))) int){storage}.big_map string address.set string.pair %transfer (address %to) (string %token_id){params}.pair (pair (pair (set string) (option address)) (big_map address (set string))) (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)){storage}
  Instruction  : MImem
  Internal error: previous type error
            MEM;         Internal error: previous type error
            Internal error: Compiler error:
  Message      : NOT on address.pair (big_map address int) (pair (pair (pair (option address) address) (pair (pair (pair (set string) (option address)) (big_map address (set string))) (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)))) int){storage}.pair (address %admin) (string %name).string.big_map string address.pair (pair (set string) (option address)) (big_map address (set string)).address.pair (big_map address int) (pair (pair (pair (option address) address) (pair (pair (pair (set string) (option address)) (big_map address (set string))) (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)))) int){storage}.big_map string address.set string.pair %transfer (address %to) (string %token_id){params}.pair (pair (pair (set string) (option address)) (big_map address (set string))) (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)){storage}
  Input stack  : address.pair (big_map address int) (pair (pair (pair (option address) address) (pair (pair (pair (set string) (option address)) (big_map address (set string))) (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)))) int){storage}.pair (address %admin) (string %name).string.big_map string address.pair (pair (set string) (option address)) (big_map address (set string)).address.pair (big_map address int) (pair (pair (pair (option address) address) (pair (pair (pair (set string) (option address)) (big_map address (set string))) (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)))) int){storage}.big_map string address.set string.pair %transfer (address %to) (string %token_id){params}.pair (pair (pair (set string) (option address)) (big_map address (set string))) (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)){storage}
  Instruction  : MInot
  Internal error: previous type error
            NOT;         Internal error: previous type error
            Internal error: mi_if  Internal error: previous type error
            # self.data.ownerToBalance[params.to] += 1  Internal error: previous type error
            SWAP;        Internal error: previous type error
            DUP;         Internal error: previous type error
            DUG 2;       Internal error: previous type error
            # invariant_top begin [ pair (big_map address int) (pair (pair (pair (option address) address) (pair (pair (pair (set string) (option address)) (big_map address (set string))) (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)))) int){storage}.address.pair (big_map address int) (pair (pair (pair (option address) address) (pair (pair (pair (set string) (option address)) (big_map address (set string))) (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)))) int){storage}.pair (address %admin) (string %name).string.big_map string address.pair (pair (set string) (option address)) (big_map address (set string)).address.pair (big_map address int) (pair (pair (pair (option address) address) (pair (pair (pair (set string) (option address)) (big_map address (set string))) (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)))) int){storage}.big_map string address.set string.pair %transfer (address %to) (string %token_id){params}.pair (pair (pair (set string) (option address)) (big_map address (set string))) (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)){storage} ]  Internal error: previous type error
            DUP;         Internal error: previous type error
            CAR;         Internal error: previous type error
            SWAP;        Internal error: previous type error
            CDR;         Internal error: previous type error
            DUP;         Internal error: previous type error
            CDR;         Internal error: previous type error
            SWAP;        Internal error: previous type error
            CAR;         Internal error: previous type error
            DUP;         Internal error: previous type error
            CAR;         Internal error: previous type error
            SWAP;        Internal error: previous type error
            CDR;         Internal error: previous type error
            DUP;         Internal error: previous type error
            CAR;         Internal error: previous type error
            SWAP;        Internal error: previous type error
            CDR;         Internal error: previous type error
            DUP;         Internal error: previous type error
            CDR;         Internal error: previous type error
            SWAP;        Internal error: previous type error
            CAR;         Internal error: previous type error
            DUP;         Internal error: previous type error
            CDR;         Internal error: previous type error
            SWAP;        Internal error: previous type error
            CAR;         Internal error: previous type error
            DUP;         Internal error: previous type error
            CAR;         Internal error: previous type error
            SWAP;        Internal error: previous type error
            CDR;         Internal error: previous type error
            PUSH int 1;  Internal error: previous type error
            DIG 10;      Internal error: previous type error
            DUP;         Internal error: previous type error
            DUG 11;      Internal error: previous type error
            Internal error: Compiler error:
  Message      : CAAAAADR on pair (big_map address int) (pair (pair (pair (option address) address) (pair (pair (pair (set string) (option address)) (big_map address (set string))) (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)))) int){storage}.int.big_map address int.pair (address %admin) (string %name).string.big_map string address.pair (pair (set string) (option address)) (big_map address (set string)).pair (option address) address.int.big_map address int.address.pair (big_map address int) (pair (pair (pair (option address) address) (pair (pair (pair (set string) (option address)) (big_map address (set string))) (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)))) int){storage}.pair (address %admin) (string %name).string.big_map string address.pair (pair (set string) (option address)) (big_map address (set string)).address.pair (big_map address int) (pair (pair (pair (option address) address) (pair (pair (pair (set string) (option address)) (big_map address (set string))) (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)))) int){storage}.big_map string address.set string.pair %transfer (address %to) (string %token_id){params}.pair (pair (pair (set string) (option address)) (big_map address (set string))) (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)){storage}
  Input stack  : pair (big_map address int) (pair (pair (pair (option address) address) (pair (pair (pair (set string) (option address)) (big_map address (set string))) (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)))) int){storage}.int.big_map address int.pair (address %admin) (string %name).string.big_map string address.pair (pair (set string) (option address)) (big_map address (set string)).pair (option address) address.int.big_map address int.address.pair (big_map address int) (pair (pair (pair (option address) address) (pair (pair (pair (set string) (option address)) (big_map address (set string))) (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)))) int){storage}.pair (address %admin) (string %name).string.big_map string address.pair (pair (set string) (option address)) (big_map address (set string)).address.pair (big_map address int) (pair (pair (pair (option address) address) (pair (pair (pair (set string) (option address)) (big_map address (set string))) (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)))) int){storage}.big_map string address.set string.pair %transfer (address %to) (string %token_id){params}.pair (pair (pair (set string) (option address)) (big_map address (set string))) (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)){storage}
  Instruction  : (MIfield [A; A; A; A; A; D])
  Internal error: previous type error
            CAAAAADR;    Internal error: previous type error
            DIG 20;      Internal error: previous type error
            DUP;         Internal error: previous type error
            DUG 21;      Internal error: previous type error
            CAR;         Internal error: previous type error
            Internal error: Compiler error:
  Message      : GET on address.pair (big_map address int) (pair (pair (pair (option address) address) (pair (pair (pair (set string) (option address)) (big_map address (set string))) (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)))) int){storage}.int.big_map address int.pair (address %admin) (string %name).string.big_map string address.pair (pair (set string) (option address)) (big_map address (set string)).pair (option address) address.int.big_map address int.address.pair (big_map address int) (pair (pair (pair (option address) address) (pair (pair (pair (set string) (option address)) (big_map address (set string))) (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)))) int){storage}.pair (address %admin) (string %name).string.big_map string address.pair (pair (set string) (option address)) (big_map address (set string)).address.pair (big_map address int) (pair (pair (pair (option address) address) (pair (pair (pair (set string) (option address)) (big_map address (set string))) (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)))) int){storage}.big_map string address.set string.pair %transfer (address %to) (string %token_id){params}.pair (pair (pair (set string) (option address)) (big_map address (set string))) (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)){storage}
  Input stack  : address.pair (big_map address int) (pair (pair (pair (option address) address) (pair (pair (pair (set string) (option address)) (big_map address (set string))) (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)))) int){storage}.int.big_map address int.pair (address %admin) (string %name).string.big_map string address.pair (pair (set string) (option address)) (big_map address (set string)).pair (option address) address.int.big_map address int.address.pair (big_map address int) (pair (pair (pair (option address) address) (pair (pair (pair (set string) (option address)) (big_map address (set string))) (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)))) int){storage}.pair (address %admin) (string %name).string.big_map string address.pair (pair (set string) (option address)) (big_map address (set string)).address.pair (big_map address int) (pair (pair (pair (option address) address) (pair (pair (pair (set string) (option address)) (big_map address (set string))) (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)))) int){storage}.big_map string address.set string.pair %transfer (address %to) (string %token_id){params}.pair (pair (pair (set string) (option address)) (big_map address (set string))) (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)){storage}
  Instruction  : MIget
  Internal error: previous type error
            GET;         Internal error: previous type error
            Internal error: mi_if_some  Internal error: previous type error
            Internal error: Compiler error:
  Message      : ADD on address.pair (big_map address int) (pair (pair (pair (option address) address) (pair (pair (pair (set string) (option address)) (big_map address (set string))) (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)))) int){storage}.int.big_map address int.pair (address %admin) (string %name).string.big_map string address.pair (pair (set string) (option address)) (big_map address (set string)).pair (option address) address.int.big_map address int.address.pair (big_map address int) (pair (pair (pair (option address) address) (pair (pair (pair (set string) (option address)) (big_map address (set string))) (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)))) int){storage}.pair (address %admin) (string %name).string.big_map string address.pair (pair (set string) (option address)) (big_map address (set string)).address.pair (big_map address int) (pair (pair (pair (option address) address) (pair (pair (pair (set string) (option address)) (big_map address (set string))) (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)))) int){storage}.big_map string address.set string.pair %transfer (address %to) (string %token_id){params}.pair (pair (pair (set string) (option address)) (big_map address (set string))) (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)){storage}
  Input stack  : address.pair (big_map address int) (pair (pair (pair (option address) address) (pair (pair (pair (set string) (option address)) (big_map address (set string))) (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)))) int){storage}.int.big_map address int.pair (address %admin) (string %name).string.big_map string address.pair (pair (set string) (option address)) (big_map address (set string)).pair (option address) address.int.big_map address int.address.pair (big_map address int) (pair (pair (pair (option address) address) (pair (pair (pair (set string) (option address)) (big_map address (set string))) (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)))) int){storage}.pair (address %admin) (string %name).string.big_map string address.pair (pair (set string) (option address)) (big_map address (set string)).address.pair (big_map address int) (pair (pair (pair (option address) address) (pair (pair (pair (set string) (option address)) (big_map address (set string))) (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)))) int){storage}.big_map string address.set string.pair %transfer (address %to) (string %token_id){params}.pair (pair (pair (set string) (option address)) (big_map address (set string))) (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)){storage}
  Instruction  : MIadd
  Internal error: previous type error
            ADD;         Internal error: previous type error
            SOME;        Internal error: previous type error
            DIG 21;      Internal error: previous type error
            DUP;         Internal error: previous type error
            DUG 22;      Internal error: previous type error
            CAR;         Internal error: previous type error
            Internal error: Compiler error:
  Message      : UPDATE on address.option address.pair (big_map address int) (pair (pair (pair (option address) address) (pair (pair (pair (set string) (option address)) (big_map address (set string))) (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)))) int){storage}.int.big_map address int.pair (address %admin) (string %name).string.big_map string address.pair (pair (set string) (option address)) (big_map address (set string)).pair (option address) address.int.big_map address int.address.pair (big_map address int) (pair (pair (pair (option address) address) (pair (pair (pair (set string) (option address)) (big_map address (set string))) (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)))) int){storage}.pair (address %admin) (string %name).string.big_map string address.pair (pair (set string) (option address)) (big_map address (set string)).address.pair (big_map address int) (pair (pair (pair (option address) address) (pair (pair (pair (set string) (option address)) (big_map address (set string))) (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)))) int){storage}.big_map string address.set string.pair %transfer (address %to) (string %token_id){params}.pair (pair (pair (set string) (option address)) (big_map address (set string))) (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)){storage}
  Input stack  : address.option address.pair (big_map address int) (pair (pair (pair (option address) address) (pair (pair (pair (set string) (option address)) (big_map address (set string))) (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)))) int){storage}.int.big_map address int.pair (address %admin) (string %name).string.big_map string address.pair (pair (set string) (option address)) (big_map address (set string)).pair (option address) address.int.big_map address int.address.pair (big_map address int) (pair (pair (pair (option address) address) (pair (pair (pair (set string) (option address)) (big_map address (set string))) (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)))) int){storage}.pair (address %admin) (string %name).string.big_map string address.pair (pair (set string) (option address)) (big_map address (set string)).address.pair (big_map address int) (pair (pair (pair (option address) address) (pair (pair (pair (set string) (option address)) (big_map address (set string))) (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)))) int){storage}.big_map string address.set string.pair %transfer (address %to) (string %token_id){params}.pair (pair (pair (set string) (option address)) (big_map address (set string))) (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)){storage}
  Instruction  : MIupdate
  Internal error: previous type error
            UPDATE;      Internal error: previous type error
            SWAP;        Internal error: previous type error
            PAIR;        Internal error: previous type error
            PAIR;        Internal error: previous type error
            PAIR;        Internal error: previous type error
            SWAP;        Internal error: previous type error
            PAIR;        Internal error: previous type error
            SWAP;        Internal error: previous type error
            PAIR;        Internal error: previous type error
            PAIR;        Internal error: previous type error
            SWAP;        Internal error: previous type error
            PAIR;        Internal error: previous type error
            # invariant_top end [ pair (big_map string address) (pair (pair (pair (address %admin) (string %name)) (pair (big_map address int) (pair (pair (pair (option address) address) (pair (big_map address int) (pair (pair (pair (option address) address) (pair (pair (pair (set string) (option address)) (big_map address (set string))) (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)))) int))) int))) string){pair(_, pair(pair(_, pair(_, pair(pair(_, storage), _))), _))}.pair (pair (set string) (option address)) (big_map address (set string)).pair (option address) address.int.big_map address int.address.pair (big_map address int) (pair (pair (pair (option address) address) (pair (pair (pair (set string) (option address)) (big_map address (set string))) (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)))) int){storage}.pair (address %admin) (string %name).string.big_map string address.pair (pair (set string) (option address)) (big_map address (set string)).address.pair (big_map address int) (pair (pair (pair (option address) address) (pair (pair (pair (set string) (option address)) (big_map address (set string))) (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)))) int){storage}.big_map string address.set string.pair %transfer (address %to) (string %token_id){params}.pair (pair (pair (set string) (option address)) (big_map address (set string))) (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)){storage} ]  Internal error: previous type error
            DUG 6;       Internal error: previous type error
            DIG 5;       Internal error: previous type error
            DROP;        Internal error: previous type error
            DIG 14;      Internal error: previous type error
            DROP;        Internal error: previous type error
          };  Internal error: UPDATE on option address.set string.big_map address (set string).pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address).big_map string address.set string.pair %mintDataToken (address %address) (string %token_id){params}.pair (pair (pair (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)) (big_map %tokenHolderToID address (set string))) (big_map %tokenIdToOwner string address)) (set string)
        Internal error: Cannot unify branches [or (or (pair %approve (address %approve_to) (string %token_id)) (string @token_id)) (pair %mintDataToken (address %address) (string %token_id)){params}.pair (pair (pair (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)) (big_map %tokenHolderToID address (set string))) (big_map %tokenIdToOwner string address)) (set %tokensMinted string){storage}] [pair (pair (set string) (option address)) (big_map address (set string)).pair (option address) address.int.big_map address int.address.pair (big_map string address) (pair (pair (pair (address %admin) (string %name)) (pair (big_map address int) (pair (pair (pair (option address) address) (pair (big_map address int) (pair (pair (pair (option address) address) (pair (pair (pair (set string) (option address)) (big_map address (set string))) (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)))) int))) int))) string){storage}.pair (address %admin) (string %name).string.big_map string address.pair (pair (set string) (option address)) (big_map address (set string)).address.pair (big_map address int) (pair (pair (pair (option address) address) (pair (pair (pair (set string) (option address)) (big_map address (set string))) (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)))) int){storage}.big_map string address.set string.pair (pair (pair (set string) (option address)) (big_map address (set string))) (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)){storage}]  Internal error: previous type error
      }
      {
        # Entry point: transferFrom # params.storage
        # sp.verify(self.data.tokensMinted.contains(params.token_id)) # params.storage
        SWAP;       # storage.params
        DUP;        # storage.storage.params
        DUG 2;      # storage.params.storage
        CDR;        # set string.params.storage
        SWAP;       # params.set string.storage
        DUP;        # params.params.set string.storage
        DUG 2;      # params.set string.params.storage
        CDR;        # string.set string.params.storage
        MEM;        # bool.params.storage
        IF
          {}
          {
            PUSH string "WrongCondition: self.data.tokensMinted.contains(params.token_id)"; # string.params.storage
            FAILWITH;   # FAILED
          }; # params.storage
        # sp.verify(params.f == self.data.tokenIdToOwner[params.token_id]) # params.storage
        SWAP;       # storage.params
        DUP;        # storage.storage.params
        DUG 2;      # storage.params.storage
        CADR;       # big_map string address.params.storage
        SWAP;       # params.big_map string address.storage
        DUP;        # params.params.big_map string address.storage
        DUG 2;      # params.big_map string address.params.storage
        CDR;        # string.big_map string address.params.storage
        GET;        # option address.params.storage
        IF_SOME
          {
            # of_some: Get-item:74 # address.params.storage
          }
          {
            PUSH string "Get-item:74"; # string.params.storage
            FAILWITH;   # FAILED
          }; # address.params.storage
        SWAP;       # params.address.storage
        DUP;        # params.params.address.storage
        DUG 2;      # params.address.params.storage
        CAAR;       # address.address.params.storage
        COMPARE;    # int.params.storage
        EQ;         # bool.params.storage
        IF
          {}
          {
            PUSH string "WrongCondition: params.f == self.data.tokenIdToOwner[params.token_id]"; # string.params.storage
            FAILWITH;   # FAILED
          }; # params.storage
        # sp.verify(sp.sender == self.data.tokenApprovals[params.token_id]) # params.storage
        SWAP;       # storage.params
        DUP;        # storage.storage.params
        DUG 2;      # storage.params.storage
        CAAADR;     # big_map string address.params.storage
        SWAP;       # params.big_map string address.storage
        DUP;        # params.params.big_map string address.storage
        DUG 2;      # params.big_map string address.params.storage
        CDR;        # string.big_map string address.params.storage
        GET;        # option address.params.storage
        IF_SOME
          {
            # of_some: Get-item:74 # address.params.storage
          }
          {
            PUSH string "Get-item:74"; # string.params.storage
            FAILWITH;   # FAILED
          }; # address.params.storage
        SENDER;     # address.address.params.storage
        COMPARE;    # int.params.storage
        EQ;         # bool.params.storage
        IF
          {}
          {
            PUSH string "WrongCondition: sp.sender == self.data.tokenApprovals[params.token_id]"; # string.params.storage
            FAILWITH;   # FAILED
          }; # params.storage
        # self.data.tokenHolderToID[params.f].remove(params.token_id) # params.storage
        SWAP;       # storage.params
        DUP;        # storage.storage.params
        DUG 2;      # storage.params.storage
        # invariant_top begin [ pair (pair (pair (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)) (big_map %tokenHolderToID address (set string))) (big_map %tokenIdToOwner string address)) (set %tokensMinted string){storage}.pair %transferFrom (pair (address %f) (address %t)) (string %token_id){params}.pair (pair (pair (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)) (big_map %tokenHolderToID address (set string))) (big_map %tokenIdToOwner string address)) (set %tokensMinted string){storage} ] # storage.params.storage
        DUP;        # storage.storage.params.storage
        CDR;        # set string.storage.params.storage
        SWAP;       # storage.set string.params.storage
        CAR;        # pair (pair (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)) (big_map %tokenHolderToID address (set string))) (big_map %tokenIdToOwner string address).set string.params.storage
        DUP;        # pair (pair (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)) (big_map %tokenHolderToID address (set string))) (big_map %tokenIdToOwner string address).pair (pair (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)) (big_map %tokenHolderToID address (set string))) (big_map %tokenIdToOwner string address).set string.params.storage
        CDR;        # big_map string address.pair (pair (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)) (big_map %tokenHolderToID address (set string))) (big_map %tokenIdToOwner string address).set string.params.storage
        SWAP;       # pair (pair (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)) (big_map %tokenHolderToID address (set string))) (big_map %tokenIdToOwner string address).big_map string address.set string.params.storage
        CAR;        # pair (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)) (big_map %tokenHolderToID address (set string)).big_map string address.set string.params.storage
        DUP;        # pair (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)) (big_map %tokenHolderToID address (set string)).pair (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)) (big_map %tokenHolderToID address (set string)).big_map string address.set string.params.storage
        CAR;        # pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address).pair (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)) (big_map %tokenHolderToID address (set string)).big_map string address.set string.params.storage
        SWAP;       # pair (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)) (big_map %tokenHolderToID address (set string)).pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address).big_map string address.set string.params.storage
        CDR;        # big_map address (set string).pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address).big_map string address.set string.params.storage
        DUP;        # big_map address (set string).big_map address (set string).pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address).big_map string address.set string.params.storage
        DIG 5;      # params.big_map address (set string).big_map address (set string).pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address).big_map string address.set string.storage
        DUP;        # params.params.big_map address (set string).big_map address (set string).pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address).big_map string address.set string.storage
        DUG 6;      # params.big_map address (set string).big_map address (set string).pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address).big_map string address.set string.params.storage
        CAAR;       # address.big_map address (set string).big_map address (set string).pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address).big_map string address.set string.params.storage
        DUP;        # address.address.big_map address (set string).big_map address (set string).pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address).big_map string address.set string.params.storage
        DUG 2;      # address.big_map address (set string).address.big_map address (set string).pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address).big_map string address.set string.params.storage
        GET;        # option (set string).address.big_map address (set string).pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address).big_map string address.set string.params.storage
        IF_SOME
          {
            # of_some: set_in_top-nil-some # set string.address.big_map address (set string).pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address).big_map string address.set string.params.storage
          }
          {
            PUSH string "set_in_top-nil-some"; # string.address.big_map address (set string).pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address).big_map string address.set string.params.storage
            FAILWITH;   # FAILED
          }; # set string.address.big_map address (set string).pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address).big_map string address.set string.params.storage
        PUSH bool False; # bool.set string.address.big_map address (set string).pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address).big_map string address.set string.params.storage
        DIG 7;      # params.bool.set string.address.big_map address (set string).pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address).big_map string address.set string.storage
        DUP;        # params.params.bool.set string.address.big_map address (set string).pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address).big_map string address.set string.storage
        DUG 8;      # params.bool.set string.address.big_map address (set string).pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address).big_map string address.set string.params.storage
        CDR;        # string.bool.set string.address.big_map address (set string).pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address).big_map string address.set string.params.storage
        UPDATE;     # set string.address.big_map address (set string).pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address).big_map string address.set string.params.storage
        SWAP;       # address.set string.big_map address (set string).pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address).big_map string address.set string.params.storage
        SOME;       # option address.set string.big_map address (set string).pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address).big_map string address.set string.params.storage
        Internal error: Compiler error:
  Message      : UPDATE on option address.set string.big_map address (set string).pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address).big_map string address.set string.pair %transferFrom (pair (address %f) (address %t)) (string %token_id){params}.pair (pair (pair (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)) (big_map %tokenHolderToID address (set string))) (big_map %tokenIdToOwner string address)) (set %tokensMinted string){storage}
  Input stack  : option address.set string.big_map address (set string).pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address).big_map string address.set string.pair %transferFrom (pair (address %f) (address %t)) (string %token_id){params}.pair (pair (pair (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)) (big_map %tokenHolderToID address (set string))) (big_map %tokenIdToOwner string address)) (set %tokensMinted string){storage}
  Instruction  : MIupdate
 # option address.set string.big_map address (set string).pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address).big_map string address.set string.pair %transferFrom (pair (address %f) (address %t)) (string %token_id){params}.pair (pair (pair (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)) (big_map %tokenHolderToID address (set string))) (big_map %tokenIdToOwner string address)) (set %tokensMinted string){storage}
        UPDATE;      Internal error: UPDATE on option address.set string.big_map address (set string).pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address).big_map string address.set string.pair %transferFrom (pair (address %f) (address %t)) (string %token_id){params}.pair (pair (pair (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)) (big_map %tokenHolderToID address (set string))) (big_map %tokenIdToOwner string address)) (set %tokensMinted string){storage}
        SWAP;        Internal error: previous type error
        PAIR;        Internal error: previous type error
        PAIR;        Internal error: previous type error
        PAIR;        Internal error: previous type error
        # invariant_top end [ pair (pair (pair (set string) (option address)) (big_map address (set string))) (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)).big_map string address.set string.pair %transferFrom (pair (address %f) (address %t)) (string %token_id){params}.pair (pair (pair (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)) (big_map %tokenHolderToID address (set string))) (big_map %tokenIdToOwner string address)) (set %tokensMinted string){storage} ]  Internal error: previous type error
        DUG 4;       Internal error: previous type error
        DIG 3;       Internal error: previous type error
        DROP;        Internal error: previous type error
        # if ~ (self.data.ownerToBalance.contains(params.t)):  Internal error: previous type error
        DIG 3;       Internal error: previous type error
        DUP;         Internal error: previous type error
        DUG 4;       Internal error: previous type error
        Internal error: Compiler error:
  Message      : CAAAAADR on pair (pair (pair (set string) (option address)) (big_map address (set string))) (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)){storage}.big_map string address.set string.pair %transferFrom (pair (address %f) (address %t)) (string %token_id){params}.pair (pair (pair (set string) (option address)) (big_map address (set string))) (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)){storage}
  Input stack  : pair (pair (pair (set string) (option address)) (big_map address (set string))) (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)){storage}.big_map string address.set string.pair %transferFrom (pair (address %f) (address %t)) (string %token_id){params}.pair (pair (pair (set string) (option address)) (big_map address (set string))) (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)){storage}
  Instruction  : (MIfield [A; A; A; A; A; D])
  Internal error: previous type error
        CAAAAADR;    Internal error: previous type error
        DIG 3;       Internal error: previous type error
        DUP;         Internal error: previous type error
        DUG 4;       Internal error: previous type error
        CADR;        Internal error: previous type error
        Internal error: Compiler error:
  Message      : MEM on address.pair (pair (pair (set string) (option address)) (big_map address (set string))) (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)){storage}.big_map string address.set string.pair %transferFrom (pair (address %f) (address %t)) (string %token_id){params}.pair (pair (pair (set string) (option address)) (big_map address (set string))) (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)){storage}
  Input stack  : address.pair (pair (pair (set string) (option address)) (big_map address (set string))) (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)){storage}.big_map string address.set string.pair %transferFrom (pair (address %f) (address %t)) (string %token_id){params}.pair (pair (pair (set string) (option address)) (big_map address (set string))) (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)){storage}
  Instruction  : MImem
  Internal error: previous type error
        MEM;         Internal error: previous type error
        Internal error: Compiler error:
  Message      : NOT on address.pair (pair (pair (set string) (option address)) (big_map address (set string))) (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)){storage}.big_map string address.set string.pair %transferFrom (pair (address %f) (address %t)) (string %token_id){params}.pair (pair (pair (set string) (option address)) (big_map address (set string))) (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)){storage}
  Input stack  : address.pair (pair (pair (set string) (option address)) (big_map address (set string))) (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)){storage}.big_map string address.set string.pair %transferFrom (pair (address %f) (address %t)) (string %token_id){params}.pair (pair (pair (set string) (option address)) (big_map address (set string))) (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)){storage}
  Instruction  : MInot
  Internal error: previous type error
        NOT;         Internal error: previous type error
        Internal error: mi_if  Internal error: previous type error
        # self.data.tokenHolderToID[params.t].add(params.token_id)  Internal error: previous type error
        SWAP;        Internal error: previous type error
        DUP;         Internal error: previous type error
        DUG 2;       Internal error: previous type error
        Internal error: set_in_top: cannot find 'tokenHolderToID' in '(pair (pair (pair (set string) (option address)) (big_map address (set string))) (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)))'   Internal error: previous type error
        DUG 2;       Internal error: previous type error
        SWAP;        Internal error: previous type error
        DROP;        Internal error: previous type error
        # self.data.tokenIdToOwner[params.token_id] = params.t  Internal error: previous type error
        SWAP;        Internal error: previous type error
        DUP;         Internal error: previous type error
        DUG 2;       Internal error: previous type error
        Internal error: set_in_top: cannot find 'tokenIdToOwner' in '(pair (pair (pair (set string) (option address)) (big_map address (set string))) (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)))'   Internal error: previous type error
        DUG 2;       Internal error: previous type error
        SWAP;        Internal error: previous type error
        DROP;        Internal error: previous type error
        # self.data.ownerToBalance[params.f] -= 1  Internal error: previous type error
        SWAP;        Internal error: previous type error
        DUP;         Internal error: previous type error
        DUG 2;       Internal error: previous type error
        # invariant_top begin [ pair (pair (pair (set string) (option address)) (big_map address (set string))) (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)){storage}.address.pair (pair (pair (set string) (option address)) (big_map address (set string))) (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)){storage}.big_map string address.set string.pair %transferFrom (pair (address %f) (address %t)) (string %token_id){params}.pair (pair (pair (set string) (option address)) (big_map address (set string))) (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)){storage} ]  Internal error: previous type error
        DUP;         Internal error: previous type error
        CAR;         Internal error: previous type error
        SWAP;        Internal error: previous type error
        CDR;         Internal error: previous type error
        DUP;         Internal error: previous type error
        CDR;         Internal error: previous type error
        SWAP;        Internal error: previous type error
        CAR;         Internal error: previous type error
        DUP;         Internal error: previous type error
        CDR;         Internal error: previous type error
        SWAP;        Internal error: previous type error
        CAR;         Internal error: previous type error
        DUP;         Internal error: previous type error
        CAR;         Internal error: previous type error
        SWAP;        Internal error: previous type error
        CDR;         Internal error: previous type error
        PUSH int 1;  Internal error: previous type error
        DIG 7;       Internal error: previous type error
        DUP;         Internal error: previous type error
        DUG 8;       Internal error: previous type error
        Internal error: Compiler error:
  Message      : CAAAAADR on pair (pair (pair (set string) (option address)) (big_map address (set string))) (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)){storage}.int.big_map address int.pair (address %admin) (string %name).string.big_map string address.pair (pair (set string) (option address)) (big_map address (set string)).address.pair (pair (pair (set string) (option address)) (big_map address (set string))) (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)){storage}.big_map string address.set string.pair %transferFrom (pair (address %f) (address %t)) (string %token_id){params}.pair (pair (pair (set string) (option address)) (big_map address (set string))) (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)){storage}
  Input stack  : pair (pair (pair (set string) (option address)) (big_map address (set string))) (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)){storage}.int.big_map address int.pair (address %admin) (string %name).string.big_map string address.pair (pair (set string) (option address)) (big_map address (set string)).address.pair (pair (pair (set string) (option address)) (big_map address (set string))) (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)){storage}.big_map string address.set string.pair %transferFrom (pair (address %f) (address %t)) (string %token_id){params}.pair (pair (pair (set string) (option address)) (big_map address (set string))) (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)){storage}
  Instruction  : (MIfield [A; A; A; A; A; D])
  Internal error: previous type error
        CAAAAADR;    Internal error: previous type error
        DIG 11;      Internal error: previous type error
        DUP;         Internal error: previous type error
        DUG 12;      Internal error: previous type error
        CAAR;        Internal error: previous type error
        Internal error: Compiler error:
  Message      : GET on address.pair (pair (pair (set string) (option address)) (big_map address (set string))) (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)){storage}.int.big_map address int.pair (address %admin) (string %name).string.big_map string address.pair (pair (set string) (option address)) (big_map address (set string)).address.pair (pair (pair (set string) (option address)) (big_map address (set string))) (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)){storage}.big_map string address.set string.pair %transferFrom (pair (address %f) (address %t)) (string %token_id){params}.pair (pair (pair (set string) (option address)) (big_map address (set string))) (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)){storage}
  Input stack  : address.pair (pair (pair (set string) (option address)) (big_map address (set string))) (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)){storage}.int.big_map address int.pair (address %admin) (string %name).string.big_map string address.pair (pair (set string) (option address)) (big_map address (set string)).address.pair (pair (pair (set string) (option address)) (big_map address (set string))) (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)){storage}.big_map string address.set string.pair %transferFrom (pair (address %f) (address %t)) (string %token_id){params}.pair (pair (pair (set string) (option address)) (big_map address (set string))) (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)){storage}
  Instruction  : MIget
  Internal error: previous type error
        GET;         Internal error: previous type error
        Internal error: mi_if_some  Internal error: previous type error
        Internal error: Compiler error:
  Message      : SUB on address.pair (pair (pair (set string) (option address)) (big_map address (set string))) (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)){storage}.int.big_map address int.pair (address %admin) (string %name).string.big_map string address.pair (pair (set string) (option address)) (big_map address (set string)).address.pair (pair (pair (set string) (option address)) (big_map address (set string))) (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)){storage}.big_map string address.set string.pair %transferFrom (pair (address %f) (address %t)) (string %token_id){params}.pair (pair (pair (set string) (option address)) (big_map address (set string))) (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)){storage}
  Input stack  : address.pair (pair (pair (set string) (option address)) (big_map address (set string))) (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)){storage}.int.big_map address int.pair (address %admin) (string %name).string.big_map string address.pair (pair (set string) (option address)) (big_map address (set string)).address.pair (pair (pair (set string) (option address)) (big_map address (set string))) (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)){storage}.big_map string address.set string.pair %transferFrom (pair (address %f) (address %t)) (string %token_id){params}.pair (pair (pair (set string) (option address)) (big_map address (set string))) (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)){storage}
  Instruction  : MIsub
  Internal error: previous type error
        SUB;         Internal error: previous type error
        SOME;        Internal error: previous type error
        DIG 12;      Internal error: previous type error
        DUP;         Internal error: previous type error
        DUG 13;      Internal error: previous type error
        CAAR;        Internal error: previous type error
        Internal error: Compiler error:
  Message      : UPDATE on address.option address.pair (pair (pair (set string) (option address)) (big_map address (set string))) (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)){storage}.int.big_map address int.pair (address %admin) (string %name).string.big_map string address.pair (pair (set string) (option address)) (big_map address (set string)).address.pair (pair (pair (set string) (option address)) (big_map address (set string))) (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)){storage}.big_map string address.set string.pair %transferFrom (pair (address %f) (address %t)) (string %token_id){params}.pair (pair (pair (set string) (option address)) (big_map address (set string))) (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)){storage}
  Input stack  : address.option address.pair (pair (pair (set string) (option address)) (big_map address (set string))) (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)){storage}.int.big_map address int.pair (address %admin) (string %name).string.big_map string address.pair (pair (set string) (option address)) (big_map address (set string)).address.pair (pair (pair (set string) (option address)) (big_map address (set string))) (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)){storage}.big_map string address.set string.pair %transferFrom (pair (address %f) (address %t)) (string %token_id){params}.pair (pair (pair (set string) (option address)) (big_map address (set string))) (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)){storage}
  Instruction  : MIupdate
  Internal error: previous type error
        UPDATE;      Internal error: previous type error
        SWAP;        Internal error: previous type error
        PAIR;        Internal error: previous type error
        PAIR;        Internal error: previous type error
        PAIR;        Internal error: previous type error
        SWAP;        Internal error: previous type error
        PAIR;        Internal error: previous type error
        # invariant_top end [ pair (big_map address int) (pair (pair (pair (option address) address) (pair (pair (pair (set string) (option address)) (big_map address (set string))) (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)))) int){pair(_, pair(pair(_, storage), _))}.pair (address %admin) (string %name).string.big_map string address.pair (pair (set string) (option address)) (big_map address (set string)).address.pair (pair (pair (set string) (option address)) (big_map address (set string))) (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)){storage}.big_map string address.set string.pair %transferFrom (pair (address %f) (address %t)) (string %token_id){params}.pair (pair (pair (set string) (option address)) (big_map address (set string))) (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)){storage} ]  Internal error: previous type error
        DUG 6;       Internal error: previous type error
        DIG 5;       Internal error: previous type error
        DROP;        Internal error: previous type error
        # if ~ (self.data.ownerToBalance.contains(params.t)):  Internal error: previous type error
        DIG 5;       Internal error: previous type error
        DUP;         Internal error: previous type error
        DUG 6;       Internal error: previous type error
        Internal error: Compiler error:
  Message      : CAAAAADR on pair (big_map address int) (pair (pair (pair (option address) address) (pair (pair (pair (set string) (option address)) (big_map address (set string))) (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)))) int){storage}.pair (address %admin) (string %name).string.big_map string address.pair (pair (set string) (option address)) (big_map address (set string)).address.pair (big_map address int) (pair (pair (pair (option address) address) (pair (pair (pair (set string) (option address)) (big_map address (set string))) (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)))) int){storage}.big_map string address.set string.pair %transferFrom (pair (address %f) (address %t)) (string %token_id){params}.pair (pair (pair (set string) (option address)) (big_map address (set string))) (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)){storage}
  Input stack  : pair (big_map address int) (pair (pair (pair (option address) address) (pair (pair (pair (set string) (option address)) (big_map address (set string))) (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)))) int){storage}.pair (address %admin) (string %name).string.big_map string address.pair (pair (set string) (option address)) (big_map address (set string)).address.pair (big_map address int) (pair (pair (pair (option address) address) (pair (pair (pair (set string) (option address)) (big_map address (set string))) (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)))) int){storage}.big_map string address.set string.pair %transferFrom (pair (address %f) (address %t)) (string %token_id){params}.pair (pair (pair (set string) (option address)) (big_map address (set string))) (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)){storage}
  Instruction  : (MIfield [A; A; A; A; A; D])
  Internal error: previous type error
        CAAAAADR;    Internal error: previous type error
        DIG 9;       Internal error: previous type error
        DUP;         Internal error: previous type error
        DUG 10;      Internal error: previous type error
        CADR;        Internal error: previous type error
        Internal error: Compiler error:
  Message      : MEM on address.pair (big_map address int) (pair (pair (pair (option address) address) (pair (pair (pair (set string) (option address)) (big_map address (set string))) (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)))) int){storage}.pair (address %admin) (string %name).string.big_map string address.pair (pair (set string) (option address)) (big_map address (set string)).address.pair (big_map address int) (pair (pair (pair (option address) address) (pair (pair (pair (set string) (option address)) (big_map address (set string))) (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)))) int){storage}.big_map string address.set string.pair %transferFrom (pair (address %f) (address %t)) (string %token_id){params}.pair (pair (pair (set string) (option address)) (big_map address (set string))) (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)){storage}
  Input stack  : address.pair (big_map address int) (pair (pair (pair (option address) address) (pair (pair (pair (set string) (option address)) (big_map address (set string))) (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)))) int){storage}.pair (address %admin) (string %name).string.big_map string address.pair (pair (set string) (option address)) (big_map address (set string)).address.pair (big_map address int) (pair (pair (pair (option address) address) (pair (pair (pair (set string) (option address)) (big_map address (set string))) (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)))) int){storage}.big_map string address.set string.pair %transferFrom (pair (address %f) (address %t)) (string %token_id){params}.pair (pair (pair (set string) (option address)) (big_map address (set string))) (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)){storage}
  Instruction  : MImem
  Internal error: previous type error
        MEM;         Internal error: previous type error
        Internal error: Compiler error:
  Message      : NOT on address.pair (big_map address int) (pair (pair (pair (option address) address) (pair (pair (pair (set string) (option address)) (big_map address (set string))) (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)))) int){storage}.pair (address %admin) (string %name).string.big_map string address.pair (pair (set string) (option address)) (big_map address (set string)).address.pair (big_map address int) (pair (pair (pair (option address) address) (pair (pair (pair (set string) (option address)) (big_map address (set string))) (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)))) int){storage}.big_map string address.set string.pair %transferFrom (pair (address %f) (address %t)) (string %token_id){params}.pair (pair (pair (set string) (option address)) (big_map address (set string))) (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)){storage}
  Input stack  : address.pair (big_map address int) (pair (pair (pair (option address) address) (pair (pair (pair (set string) (option address)) (big_map address (set string))) (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)))) int){storage}.pair (address %admin) (string %name).string.big_map string address.pair (pair (set string) (option address)) (big_map address (set string)).address.pair (big_map address int) (pair (pair (pair (option address) address) (pair (pair (pair (set string) (option address)) (big_map address (set string))) (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)))) int){storage}.big_map string address.set string.pair %transferFrom (pair (address %f) (address %t)) (string %token_id){params}.pair (pair (pair (set string) (option address)) (big_map address (set string))) (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)){storage}
  Instruction  : MInot
  Internal error: previous type error
        NOT;         Internal error: previous type error
        Internal error: mi_if  Internal error: previous type error
        # self.data.ownerToBalance[params.t] += 1  Internal error: previous type error
        SWAP;        Internal error: previous type error
        DUP;         Internal error: previous type error
        DUG 2;       Internal error: previous type error
        # invariant_top begin [ pair (big_map address int) (pair (pair (pair (option address) address) (pair (pair (pair (set string) (option address)) (big_map address (set string))) (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)))) int){storage}.address.pair (big_map address int) (pair (pair (pair (option address) address) (pair (pair (pair (set string) (option address)) (big_map address (set string))) (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)))) int){storage}.pair (address %admin) (string %name).string.big_map string address.pair (pair (set string) (option address)) (big_map address (set string)).address.pair (big_map address int) (pair (pair (pair (option address) address) (pair (pair (pair (set string) (option address)) (big_map address (set string))) (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)))) int){storage}.big_map string address.set string.pair %transferFrom (pair (address %f) (address %t)) (string %token_id){params}.pair (pair (pair (set string) (option address)) (big_map address (set string))) (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)){storage} ]  Internal error: previous type error
        DUP;         Internal error: previous type error
        CAR;         Internal error: previous type error
        SWAP;        Internal error: previous type error
        CDR;         Internal error: previous type error
        DUP;         Internal error: previous type error
        CDR;         Internal error: previous type error
        SWAP;        Internal error: previous type error
        CAR;         Internal error: previous type error
        DUP;         Internal error: previous type error
        CAR;         Internal error: previous type error
        SWAP;        Internal error: previous type error
        CDR;         Internal error: previous type error
        DUP;         Internal error: previous type error
        CAR;         Internal error: previous type error
        SWAP;        Internal error: previous type error
        CDR;         Internal error: previous type error
        DUP;         Internal error: previous type error
        CDR;         Internal error: previous type error
        SWAP;        Internal error: previous type error
        CAR;         Internal error: previous type error
        DUP;         Internal error: previous type error
        CDR;         Internal error: previous type error
        SWAP;        Internal error: previous type error
        CAR;         Internal error: previous type error
        DUP;         Internal error: previous type error
        CAR;         Internal error: previous type error
        SWAP;        Internal error: previous type error
        CDR;         Internal error: previous type error
        PUSH int 1;  Internal error: previous type error
        DIG 10;      Internal error: previous type error
        DUP;         Internal error: previous type error
        DUG 11;      Internal error: previous type error
        Internal error: Compiler error:
  Message      : CAAAAADR on pair (big_map address int) (pair (pair (pair (option address) address) (pair (pair (pair (set string) (option address)) (big_map address (set string))) (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)))) int){storage}.int.big_map address int.pair (address %admin) (string %name).string.big_map string address.pair (pair (set string) (option address)) (big_map address (set string)).pair (option address) address.int.big_map address int.address.pair (big_map address int) (pair (pair (pair (option address) address) (pair (pair (pair (set string) (option address)) (big_map address (set string))) (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)))) int){storage}.pair (address %admin) (string %name).string.big_map string address.pair (pair (set string) (option address)) (big_map address (set string)).address.pair (big_map address int) (pair (pair (pair (option address) address) (pair (pair (pair (set string) (option address)) (big_map address (set string))) (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)))) int){storage}.big_map string address.set string.pair %transferFrom (pair (address %f) (address %t)) (string %token_id){params}.pair (pair (pair (set string) (option address)) (big_map address (set string))) (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)){storage}
  Input stack  : pair (big_map address int) (pair (pair (pair (option address) address) (pair (pair (pair (set string) (option address)) (big_map address (set string))) (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)))) int){storage}.int.big_map address int.pair (address %admin) (string %name).string.big_map string address.pair (pair (set string) (option address)) (big_map address (set string)).pair (option address) address.int.big_map address int.address.pair (big_map address int) (pair (pair (pair (option address) address) (pair (pair (pair (set string) (option address)) (big_map address (set string))) (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)))) int){storage}.pair (address %admin) (string %name).string.big_map string address.pair (pair (set string) (option address)) (big_map address (set string)).address.pair (big_map address int) (pair (pair (pair (option address) address) (pair (pair (pair (set string) (option address)) (big_map address (set string))) (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)))) int){storage}.big_map string address.set string.pair %transferFrom (pair (address %f) (address %t)) (string %token_id){params}.pair (pair (pair (set string) (option address)) (big_map address (set string))) (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)){storage}
  Instruction  : (MIfield [A; A; A; A; A; D])
  Internal error: previous type error
        CAAAAADR;    Internal error: previous type error
        DIG 20;      Internal error: previous type error
        DUP;         Internal error: previous type error
        DUG 21;      Internal error: previous type error
        CADR;        Internal error: previous type error
        Internal error: Compiler error:
  Message      : GET on address.pair (big_map address int) (pair (pair (pair (option address) address) (pair (pair (pair (set string) (option address)) (big_map address (set string))) (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)))) int){storage}.int.big_map address int.pair (address %admin) (string %name).string.big_map string address.pair (pair (set string) (option address)) (big_map address (set string)).pair (option address) address.int.big_map address int.address.pair (big_map address int) (pair (pair (pair (option address) address) (pair (pair (pair (set string) (option address)) (big_map address (set string))) (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)))) int){storage}.pair (address %admin) (string %name).string.big_map string address.pair (pair (set string) (option address)) (big_map address (set string)).address.pair (big_map address int) (pair (pair (pair (option address) address) (pair (pair (pair (set string) (option address)) (big_map address (set string))) (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)))) int){storage}.big_map string address.set string.pair %transferFrom (pair (address %f) (address %t)) (string %token_id){params}.pair (pair (pair (set string) (option address)) (big_map address (set string))) (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)){storage}
  Input stack  : address.pair (big_map address int) (pair (pair (pair (option address) address) (pair (pair (pair (set string) (option address)) (big_map address (set string))) (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)))) int){storage}.int.big_map address int.pair (address %admin) (string %name).string.big_map string address.pair (pair (set string) (option address)) (big_map address (set string)).pair (option address) address.int.big_map address int.address.pair (big_map address int) (pair (pair (pair (option address) address) (pair (pair (pair (set string) (option address)) (big_map address (set string))) (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)))) int){storage}.pair (address %admin) (string %name).string.big_map string address.pair (pair (set string) (option address)) (big_map address (set string)).address.pair (big_map address int) (pair (pair (pair (option address) address) (pair (pair (pair (set string) (option address)) (big_map address (set string))) (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)))) int){storage}.big_map string address.set string.pair %transferFrom (pair (address %f) (address %t)) (string %token_id){params}.pair (pair (pair (set string) (option address)) (big_map address (set string))) (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)){storage}
  Instruction  : MIget
  Internal error: previous type error
        GET;         Internal error: previous type error
        Internal error: mi_if_some  Internal error: previous type error
        Internal error: Compiler error:
  Message      : ADD on address.pair (big_map address int) (pair (pair (pair (option address) address) (pair (pair (pair (set string) (option address)) (big_map address (set string))) (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)))) int){storage}.int.big_map address int.pair (address %admin) (string %name).string.big_map string address.pair (pair (set string) (option address)) (big_map address (set string)).pair (option address) address.int.big_map address int.address.pair (big_map address int) (pair (pair (pair (option address) address) (pair (pair (pair (set string) (option address)) (big_map address (set string))) (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)))) int){storage}.pair (address %admin) (string %name).string.big_map string address.pair (pair (set string) (option address)) (big_map address (set string)).address.pair (big_map address int) (pair (pair (pair (option address) address) (pair (pair (pair (set string) (option address)) (big_map address (set string))) (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)))) int){storage}.big_map string address.set string.pair %transferFrom (pair (address %f) (address %t)) (string %token_id){params}.pair (pair (pair (set string) (option address)) (big_map address (set string))) (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)){storage}
  Input stack  : address.pair (big_map address int) (pair (pair (pair (option address) address) (pair (pair (pair (set string) (option address)) (big_map address (set string))) (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)))) int){storage}.int.big_map address int.pair (address %admin) (string %name).string.big_map string address.pair (pair (set string) (option address)) (big_map address (set string)).pair (option address) address.int.big_map address int.address.pair (big_map address int) (pair (pair (pair (option address) address) (pair (pair (pair (set string) (option address)) (big_map address (set string))) (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)))) int){storage}.pair (address %admin) (string %name).string.big_map string address.pair (pair (set string) (option address)) (big_map address (set string)).address.pair (big_map address int) (pair (pair (pair (option address) address) (pair (pair (pair (set string) (option address)) (big_map address (set string))) (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)))) int){storage}.big_map string address.set string.pair %transferFrom (pair (address %f) (address %t)) (string %token_id){params}.pair (pair (pair (set string) (option address)) (big_map address (set string))) (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)){storage}
  Instruction  : MIadd
  Internal error: previous type error
        ADD;         Internal error: previous type error
        SOME;        Internal error: previous type error
        DIG 21;      Internal error: previous type error
        DUP;         Internal error: previous type error
        DUG 22;      Internal error: previous type error
        CADR;        Internal error: previous type error
        Internal error: Compiler error:
  Message      : UPDATE on address.option address.pair (big_map address int) (pair (pair (pair (option address) address) (pair (pair (pair (set string) (option address)) (big_map address (set string))) (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)))) int){storage}.int.big_map address int.pair (address %admin) (string %name).string.big_map string address.pair (pair (set string) (option address)) (big_map address (set string)).pair (option address) address.int.big_map address int.address.pair (big_map address int) (pair (pair (pair (option address) address) (pair (pair (pair (set string) (option address)) (big_map address (set string))) (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)))) int){storage}.pair (address %admin) (string %name).string.big_map string address.pair (pair (set string) (option address)) (big_map address (set string)).address.pair (big_map address int) (pair (pair (pair (option address) address) (pair (pair (pair (set string) (option address)) (big_map address (set string))) (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)))) int){storage}.big_map string address.set string.pair %transferFrom (pair (address %f) (address %t)) (string %token_id){params}.pair (pair (pair (set string) (option address)) (big_map address (set string))) (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)){storage}
  Input stack  : address.option address.pair (big_map address int) (pair (pair (pair (option address) address) (pair (pair (pair (set string) (option address)) (big_map address (set string))) (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)))) int){storage}.int.big_map address int.pair (address %admin) (string %name).string.big_map string address.pair (pair (set string) (option address)) (big_map address (set string)).pair (option address) address.int.big_map address int.address.pair (big_map address int) (pair (pair (pair (option address) address) (pair (pair (pair (set string) (option address)) (big_map address (set string))) (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)))) int){storage}.pair (address %admin) (string %name).string.big_map string address.pair (pair (set string) (option address)) (big_map address (set string)).address.pair (big_map address int) (pair (pair (pair (option address) address) (pair (pair (pair (set string) (option address)) (big_map address (set string))) (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)))) int){storage}.big_map string address.set string.pair %transferFrom (pair (address %f) (address %t)) (string %token_id){params}.pair (pair (pair (set string) (option address)) (big_map address (set string))) (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)){storage}
  Instruction  : MIupdate
  Internal error: previous type error
        UPDATE;      Internal error: previous type error
        SWAP;        Internal error: previous type error
        PAIR;        Internal error: previous type error
        PAIR;        Internal error: previous type error
        PAIR;        Internal error: previous type error
        SWAP;        Internal error: previous type error
        PAIR;        Internal error: previous type error
        SWAP;        Internal error: previous type error
        PAIR;        Internal error: previous type error
        PAIR;        Internal error: previous type error
        SWAP;        Internal error: previous type error
        PAIR;        Internal error: previous type error
        # invariant_top end [ pair (big_map string address) (pair (pair (pair (address %admin) (string %name)) (pair (big_map address int) (pair (pair (pair (option address) address) (pair (big_map address int) (pair (pair (pair (option address) address) (pair (pair (pair (set string) (option address)) (big_map address (set string))) (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)))) int))) int))) string){pair(_, pair(pair(_, pair(_, pair(pair(_, storage), _))), _))}.pair (pair (set string) (option address)) (big_map address (set string)).pair (option address) address.int.big_map address int.address.pair (big_map address int) (pair (pair (pair (option address) address) (pair (pair (pair (set string) (option address)) (big_map address (set string))) (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)))) int){storage}.pair (address %admin) (string %name).string.big_map string address.pair (pair (set string) (option address)) (big_map address (set string)).address.pair (big_map address int) (pair (pair (pair (option address) address) (pair (pair (pair (set string) (option address)) (big_map address (set string))) (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)))) int){storage}.big_map string address.set string.pair %transferFrom (pair (address %f) (address %t)) (string %token_id){params}.pair (pair (pair (set string) (option address)) (big_map address (set string))) (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)){storage} ]  Internal error: previous type error
        DUG 6;       Internal error: previous type error
        DIG 5;       Internal error: previous type error
        DROP;        Internal error: previous type error
        DIG 14;      Internal error: previous type error
        DROP;        Internal error: previous type error
      };  Internal error: UPDATE on option address.set string.big_map address (set string).pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address).big_map string address.set string.pair %mintDataToken (address %address) (string %token_id){params}.pair (pair (pair (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)) (big_map %tokenHolderToID address (set string))) (big_map %tokenIdToOwner string address)) (set string)
    Internal error: Cannot unify branches [or (or (or (pair %approve (address %approve_to) (string %token_id)) (string @token_id)) (pair %mintDataToken (address %address) (string %token_id))) (pair %transfer (address %to) (string %token_id)){params}.pair (pair (pair (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)) (big_map %tokenHolderToID address (set string))) (big_map %tokenIdToOwner string address)) (set %tokensMinted string){storage}] [pair (pair (set string) (option address)) (big_map address (set string)).pair (option address) address.int.big_map address int.address.pair (big_map string address) (pair (pair (pair (address %admin) (string %name)) (pair (big_map address int) (pair (pair (pair (option address) address) (pair (big_map address int) (pair (pair (pair (option address) address) (pair (pair (pair (set string) (option address)) (big_map address (set string))) (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)))) int))) int))) string){storage}.pair (address %admin) (string %name).string.big_map string address.pair (pair (set string) (option address)) (big_map address (set string)).address.pair (big_map address int) (pair (pair (pair (option address) address) (pair (pair (pair (set string) (option address)) (big_map address (set string))) (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)))) int){storage}.big_map string address.set string.pair (pair (pair (set string) (option address)) (big_map address (set string))) (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)){storage}]  Internal error: previous type error
    Internal error: finalize  Internal error: previous type error
  }  Internal error: UPDATE on option address.set string.big_map address (set string).pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address).big_map string address.set string.pair %mintDataToken (address %address) (string %token_id){params}.pair (pair (pair (pair (pair (pair (pair (address %admin) (string %name)) (big_map %ownerToBalance address int)) (string %symbol)) (big_map %tokenApprovals string address)) (big_map %tokenHolderToID address (set string))) (big_map %tokenIdToOwner string address)) (set string)